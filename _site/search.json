[
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Creating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It’s about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately.\n\n\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualization for the article.\n\n\n\n\n\nWe load the following R packages using the pacman::p_load() function:\n\ntidyverse: R packages designed for data science\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nscales: to provide the internal scaling infrastructure used by ggplot2\nggpubr to create publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, scales,\n               ggpubr) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\ndata &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\nWe first take a look at the data. Using the code below, we can get the details of the dataset which contains 60,424 rows and 6 columns.\n\nglimpse(data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\n\nWe notice that there is only one value in Time column (2024) which will not be used for further analysis, we will delete this column as per the code chunk below:\n\n\ndata &lt;- data %&gt;% select(-Time)\n\n\nWe will rename the column names in the dataset for clarity, as detailed provided by the Department of Statistics (DOS), as follows:\n\nPA → Planning Area\nSZ → Subzone\nPop → Resident Count\n\n\n\n\n\n\nSide Note:\n\n\n\nPlease note: according to the DOS accompanying documentation of this dataset, the population figures in the csv file have been rounded to the nearest 10, and as such, total counts may not sum exactly due to rounding adjustments.\n\n\n\ncolnames(data) &lt;- c(\"PlanningArea\", \"SubZone\", \"Age\", \"Sex\", \"ResidentCount\")\n\n\nNext, we observe that for the Age column, there is a value of : “90_and_over”. We will replace this value with “90” and change the data type from string/character to numeric and then create a new column to classify the age according to the age bracket in the interval of 5 years as per the standard age group published in DOS:\n\n\ndata &lt;- data %&gt;%\n  mutate(\n    Age = str_to_lower(Age),\n    Age = ifelse(Age == \"90_and_over\", \"90\", Age),\n    Age = as.numeric(Age),\n    AgeGroup = cut(Age,\n                   breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89, Inf),\n                   labels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\", \"25–29\",\n                              \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\", \n                              \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \n                              \"80–84\", \"85–89\", \"90+\"),\n                   right = TRUE, include.lowest = TRUE)\n  )\n\n\nFurther observation of the dataset, we discover there are multiple rows with “0” values in the “Pop”/“ResidentCount” column. We will remove these rows as per the code chunk below, and calculate the number of rows and total population before and after the deletion to ensure completeness:\n\n\ntotal_population_before &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_before &lt;- nrow(data)\n\nzero_count &lt;- data %&gt;%\n  filter(ResidentCount == 0) %&gt;%\n  nrow()\n\ncat(\"Total population before cleaning:\", format(total_population_before, big.mark = \",\"), \"\\n\")\n\nTotal population before cleaning: 4,193,530 \n\ncat(\"Total rows before cleaning:\", total_rows_before, \"\\n\")\n\nTotal rows before cleaning: 60424 \n\ncat(\"Rows with 0 ResidentCount removed:\", zero_count, \"\\n\")\n\nRows with 0 ResidentCount removed: 23181 \n\ndata &lt;- data %&gt;%\n  filter(ResidentCount &gt; 0)\n\ntotal_population_after &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_after &lt;- nrow(data)\n\ncat(\"Total population after cleaning:\", format(total_population_after, big.mark = \",\"), \"\\n\")\n\nTotal population after cleaning: 4,193,530 \n\ncat(\"Remaining rows:\", total_rows_after, \"\\n\")\n\nRemaining rows: 37243 \n\n\n\n\n\nNext, Using the duplicated function, we see that there are no duplicate entries in the data.\n\ndata[duplicated(data),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PlanningArea &lt;chr&gt;, SubZone &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   ResidentCount &lt;dbl&gt;, AgeGroup &lt;fct&gt;\n\n\n\n\n\nWe run the code below to check for any missing values, and there is none.\n\ncolSums(is.na(data))\n\n PlanningArea       SubZone           Age           Sex ResidentCount \n            0             0             0             0             0 \n     AgeGroup \n            0 \n\n\n\n\n\nWe run an overview of the final dataset again before proceeding to the visualization. Final dataset contains 37,243 rows and 7 columns:\n\nglimpse(data)\n\nRows: 37,243\nColumns: 6\n$ PlanningArea  &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ SubZone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ ResidentCount &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ AgeGroup      &lt;fct&gt; 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 5–9, 5…\n\n\n\n\n\n\n\n\n\nInsights:\n\nThe population pyramid reveals a dominant working-age group between ages 30–44, forming the broadest segment of the chart, with largest age group for Female: from 35-39 age group: 166,150 and Males: from 30-34 age group with 155,630\nThe base is narrower, especially for those aged 0–14, which highlights the ongoing trend of declining birth rates.\nFemales significantly outnumber males from age 65 onwards, highlighting gender differences in life expectancy\nThe median age of 42 reinforces Singapore’s aging trend, with implications for healthcare and eldercare planning.\nThe median age of 42 underscores Singapore’s aging population, signaling increasing needs in healthcare, retirement, and eldercare.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    ResidentCountSigned = ifelse(Sex == \"Males\", -ResidentCount, ResidentCount),\n    fill_color = case_when(\n      Sex == \"Males\" ~ \"#4292c6\",\n      Sex == \"Females\" ~ \"#e377c2\",\n      TRUE ~ \"gray\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\",\n                                           \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\",\n                                           \"50–54\", \"55–59\", \"60–64\", \"65–69\", \"70–74\",\n                                           \"75–79\", \"80–84\", \"85–89\", \"90+\"))\n  )\n\nmedian_age &lt;- data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Total = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(Age) %&gt;%\n  mutate(cum_pop = cumsum(Total), prop = cum_pop / sum(Total)) %&gt;%\n  filter(prop &gt;= 0.5) %&gt;%\n  slice(1) %&gt;%\n  pull(Age)\n\nage_group_labels &lt;- levels(pyramid_data$AgeGroup)\nmedian_group_index &lt;- findInterval(median_age, seq(0, 100, by = 5))\nmedian_group &lt;- age_group_labels[median_group_index]\n\ntotal_males &lt;- pyramid_data %&gt;% filter(Sex == \"Males\") %&gt;% summarise(sum = sum(abs(ResidentCountSigned))) %&gt;% pull(sum)\ntotal_females &lt;- pyramid_data %&gt;% filter(Sex == \"Females\") %&gt;% summarise(sum = sum(ResidentCountSigned)) %&gt;% pull(sum)\n\nggplot(pyramid_data, aes(y = AgeGroup, x = ResidentCountSigned, fill = fill_color)) +\n  geom_col(width = 0.9) +\n  geom_text(aes(label = abs(ResidentCountSigned),\n                x = ifelse(ResidentCountSigned &lt; 0, ResidentCountSigned - 5000, ResidentCountSigned + 5000)),\n            hjust = ifelse(pyramid_data$ResidentCountSigned &lt; 0, 1, 0),\n            size = 3, color = \"black\") +\n  annotate(\"segment\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           xend = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group, yend = median_group,\n           linetype = \"dotted\", color = \"#A9A9A9\", linewidth = 0.9) +\n  annotate(\"text\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group,\n           label = paste0(\"Median: \", median_age),\n           hjust = 0, size = 2.8, color = \"black\", fontface = \"bold\") +\n  annotate(\"text\", y = \"0–4\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Males\\nTotal: \", format(total_males, big.mark = \",\")),\n           size = 2.6, color = \"#1E90FF\", fontface = \"bold\", hjust = 1) +\n  annotate(\"text\", y = \"0–4\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Females\\nTotal: \", format(total_females, big.mark = \",\")),\n           size = 2.6, color = \"#c51b8a\", fontface = \"bold\", hjust = 0) +\n  scale_fill_identity() +\n  scale_x_continuous(labels = abs, expand = expansion(mult = c(0.12, 0.12))) +\n  labs(\n    title = \"Singapore’s Shifting Age Structure (June 2024)\",\n    subtitle = \"Middle-age Population Dominates; Youth Base Shrinking, Elderly Segment Rising\",\n    x = NULL,\n    y = \"Age Group (Years)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 6)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 12)),\n    axis.text.y = element_text(size = 10),\n    axis.title.y = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe top chart shows the proportion of elderly residents in the top 10 planning areas. Outram has the highest share, with 26.9% of its population are seniors, followed by Ang Mo Kio (24.3%) and Bukit Merah (23.4%). These established towns may benefit from enhanced elderly-supportive environments, such as barrier-free access, senior-oriented amenities, and close-proximity services.\nThe bottom chart presents the elderly resident count, with Bedok having the largest at 60,770, followed by Tampines (49,700) and Hougang (44,640). This is largely due to their larger area size and population base. These towns would benefit from service scaling, such as Active Ageing Centres (AACs), public transport connectivity, and healthcare access.\nWith Singapore’s elderly population projected to reach one in four residents (DOS, 2024), it is important to consider both distribution by proportion and resident count for effective planning.\nThis dual perspective supports the Ministry of Health’s 2023 Action Plan, which aims to double eldercare centres by 2025 and enhance community-based support (MOH, 2023).\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelderly_data &lt;- data %&gt;% filter(Age &gt;= 65)\n\ntotal_pop &lt;- data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Total_Pop = sum(ResidentCount, na.rm = TRUE))\n\nelderly_count &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Elderly_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Pop))\n\nelderly_prop &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  left_join(total_pop, by = \"PlanningArea\") %&gt;%\n  mutate(Elderly_Proportion = Elderly_Pop / Total_Pop) %&gt;%\n  arrange(desc(Elderly_Proportion)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Proportion))\n\n# Plot\np1 &lt;- ggplot(elderly_prop, aes(x = Elderly_Proportion, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 0.35, by = 0.05),\n    labels = percent_format(accuracy = 1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Proportion (Age 65+)\",\n    x = \"Proportion of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\n\np2 &lt;- ggplot(elderly_count, aes(x = Elderly_Pop, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 70000, by = 10000),\n    labels = comma_format(),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Resident Count (Age 65+)\",\n    x = \"Number of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\np1 / p2\n\n\n\n\n\n\n\nInsights:\n\nTampines, Bedok, and Sengkang are top the list with over 250,000 residents each.\nMillennials (age 28–43) are the largest group in most PA, while Gen X dominates in Bedok, a mature estate.\nYounger generations (Gen Alpha and Gen Z) are more concentrated in newer towns like Sengkang, Punggol, and Jurong West, aligned with recent BTO developments that attract young families.\nThe distribution reflects a balanced generational mix, highlighting Singapore’s multigenerational living pattern—with both aging residents and young households sharing town spaces.\nThese trends align with Singapore’s Smart Nation and HDB’s ‘Designing for Life’ vision: fostering harmonious, inclusive communities where families of all ages can live, age, and thrive together through well-integrated facilities, technology, and people-first urban design.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate(Age = as.numeric(Age),\n         Generation = case_when(\n           Age &lt;= 9 ~ \"Gen Alpha (≤9)\",\n           Age &lt;= 27 ~ \"Gen Z (10–27)\",\n           Age &lt;= 43 ~ \"Millennials (28–43)\",\n           Age &lt;= 59 ~ \"Gen X (44–59)\",\n           Age &lt;= 77 ~ \"Baby Boomers (60–77)\",\n           TRUE ~ \"Silent Gen (78+)\"\n         ))\n\ngen_by_area &lt;- data %&gt;%\n  group_by(PlanningArea, Generation) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE), .groups = \"drop\")\n\ntop10_areas &lt;- gen_by_area %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(TotalPop = sum(ResidentCount)) %&gt;%\n  arrange(desc(TotalPop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PlanningArea)\n\ngen_top10 &lt;- gen_by_area %&gt;%\n  filter(PlanningArea %in% top10_areas) %&gt;%\n  mutate(\n    PlanningArea = fct_reorder(PlanningArea, ResidentCount, .fun = sum, .desc = TRUE),\n    Generation = factor(Generation, levels = c(\"Silent Gen (78+)\", \"Baby Boomers (60–77)\",\n                                               \"Gen X (44–59)\", \"Millennials (28–43)\",\n                                               \"Gen Z (10–27)\", \"Gen Alpha (≤9)\"))\n  )\n\ngen_colors &lt;- c(\n  \"Silent Gen (78+)\" = \"#c6dbef\",\n  \"Baby Boomers (60–77)\" = \"#6baed6\",\n  \"Gen X (44–59)\" = \"#b2df8a\",\n  \"Millennials (28–43)\" = \"#33a02c\",\n  \"Gen Z (10–27)\" = \"#fb9a99\",\n  \"Gen Alpha (≤9)\" = \"#e31a1c\"\n)\n\n#Plot\nggplot(gen_top10, aes(x = PlanningArea, y = ResidentCount, fill = Generation)) +\n  geom_col(width = 0.8, color = \"white\") +\n  scale_fill_manual(values = gen_colors) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, 300000, 50000),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Generational Composition of Top 10 Most Populated Planning Areas\",\n    subtitle = \"Younger generations dominate newer towns, while older cohorts concentrate in mature estates\",\n    x = \"Planning Area\",\n    y = \"Resident Count\",\n    fill = \"Generation\"\n  ) +\n  theme_clean(base_size = 12) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nSingapore’s demographic structure, based on June 2024 data, highlights a maturing society with a dominant working-age group and a median age of 42. The growing share of seniors and the narrowing base of younger age groups reflect the effects of population aging and low birth rates. Mature estates such as Outram have the highest proportion of elderly residents, while Bedok and Tampines house the largest absolute numbers. In contrast, newer towns like Sengkang and Punggol show higher concentrations of younger generations—particularly Gen Alpha and Gen Z—driven by recent BTO developments attracting young families. Millennials remain the largest generational group across most areas, reinforcing their role in shaping urban life. This evolving yet balanced generational landscape underscores the need for inclusive community planning that supports both young families and seniors—fostering intergenerational harmony and enabling families to live, age, and thrive together.\n\n\n\n\nDepartment of Statistics Singapore. (2024). Population Trends 2024.\nRetrieved from: https://www.singstat.gov.sg/publications/population/population-trends\nMinistry of Health Singapore. (2023). Action Plan for Successful Ageing.\nRetrieved from: https://www.moh.gov.sg/newsroom/launch-of-the-2023-action-plan-for-successful-ageing\nHousing & Development Board (HDB). (2021). Designing for Life: Community Planning and Design Guide.\nRetrieved from: https://www.hdb.gov.sg/cs/infoweb/designing-for-life\nSmart Nation and Digital Government Office. (2023). Smart Nation: Empowering Everyone Through Technology.\nRetrieved from: https://www.smartnation.gov.sg\nSingapore Department of Statistics. (n.d.). National Statistical Standards.\nRetrieved from: https://www.singstat.gov.sg/standards"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#overview",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Creating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It’s about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#the-task",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualization for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#getting-started",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "We load the following R packages using the pacman::p_load() function:\n\ntidyverse: R packages designed for data science\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nscales: to provide the internal scaling infrastructure used by ggplot2\nggpubr to create publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, scales,\n               ggpubr) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\ndata &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\nWe first take a look at the data. Using the code below, we can get the details of the dataset which contains 60,424 rows and 6 columns.\n\nglimpse(data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\n\nWe notice that there is only one value in Time column (2024) which will not be used for further analysis, we will delete this column as per the code chunk below:\n\n\ndata &lt;- data %&gt;% select(-Time)\n\n\nWe will rename the column names in the dataset for clarity, as detailed provided by the Department of Statistics (DOS), as follows:\n\nPA → Planning Area\nSZ → Subzone\nPop → Resident Count\n\n\n\n\n\n\nSide Note:\n\n\n\nPlease note: according to the DOS accompanying documentation of this dataset, the population figures in the csv file have been rounded to the nearest 10, and as such, total counts may not sum exactly due to rounding adjustments.\n\n\n\ncolnames(data) &lt;- c(\"PlanningArea\", \"SubZone\", \"Age\", \"Sex\", \"ResidentCount\")\n\n\nNext, we observe that for the Age column, there is a value of : “90_and_over”. We will replace this value with “90” and change the data type from string/character to numeric and then create a new column to classify the age according to the age bracket in the interval of 5 years as per the standard age group published in DOS:\n\n\ndata &lt;- data %&gt;%\n  mutate(\n    Age = str_to_lower(Age),\n    Age = ifelse(Age == \"90_and_over\", \"90\", Age),\n    Age = as.numeric(Age),\n    AgeGroup = cut(Age,\n                   breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89, Inf),\n                   labels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\", \"25–29\",\n                              \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\", \n                              \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \n                              \"80–84\", \"85–89\", \"90+\"),\n                   right = TRUE, include.lowest = TRUE)\n  )\n\n\nFurther observation of the dataset, we discover there are multiple rows with “0” values in the “Pop”/“ResidentCount” column. We will remove these rows as per the code chunk below, and calculate the number of rows and total population before and after the deletion to ensure completeness:\n\n\ntotal_population_before &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_before &lt;- nrow(data)\n\nzero_count &lt;- data %&gt;%\n  filter(ResidentCount == 0) %&gt;%\n  nrow()\n\ncat(\"Total population before cleaning:\", format(total_population_before, big.mark = \",\"), \"\\n\")\n\nTotal population before cleaning: 4,193,530 \n\ncat(\"Total rows before cleaning:\", total_rows_before, \"\\n\")\n\nTotal rows before cleaning: 60424 \n\ncat(\"Rows with 0 ResidentCount removed:\", zero_count, \"\\n\")\n\nRows with 0 ResidentCount removed: 23181 \n\ndata &lt;- data %&gt;%\n  filter(ResidentCount &gt; 0)\n\ntotal_population_after &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_after &lt;- nrow(data)\n\ncat(\"Total population after cleaning:\", format(total_population_after, big.mark = \",\"), \"\\n\")\n\nTotal population after cleaning: 4,193,530 \n\ncat(\"Remaining rows:\", total_rows_after, \"\\n\")\n\nRemaining rows: 37243 \n\n\n\n\n\nNext, Using the duplicated function, we see that there are no duplicate entries in the data.\n\ndata[duplicated(data),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PlanningArea &lt;chr&gt;, SubZone &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   ResidentCount &lt;dbl&gt;, AgeGroup &lt;fct&gt;\n\n\n\n\n\nWe run the code below to check for any missing values, and there is none.\n\ncolSums(is.na(data))\n\n PlanningArea       SubZone           Age           Sex ResidentCount \n            0             0             0             0             0 \n     AgeGroup \n            0 \n\n\n\n\n\nWe run an overview of the final dataset again before proceeding to the visualization. Final dataset contains 37,243 rows and 7 columns:\n\nglimpse(data)\n\nRows: 37,243\nColumns: 6\n$ PlanningArea  &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ SubZone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ ResidentCount &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ AgeGroup      &lt;fct&gt; 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 5–9, 5…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#data-visualization",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#data-visualization",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Insights:\n\nThe population pyramid reveals a dominant working-age group between ages 30–44, forming the broadest segment of the chart, with largest age group for Female: from 35-39 age group: 166,150 and Males: from 30-34 age group with 155,630\nThe base is narrower, especially for those aged 0–14, which highlights the ongoing trend of declining birth rates.\nFemales significantly outnumber males from age 65 onwards, highlighting gender differences in life expectancy\nThe median age of 42 reinforces Singapore’s aging trend, with implications for healthcare and eldercare planning.\nThe median age of 42 underscores Singapore’s aging population, signaling increasing needs in healthcare, retirement, and eldercare.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    ResidentCountSigned = ifelse(Sex == \"Males\", -ResidentCount, ResidentCount),\n    fill_color = case_when(\n      Sex == \"Males\" ~ \"#4292c6\",\n      Sex == \"Females\" ~ \"#e377c2\",\n      TRUE ~ \"gray\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\",\n                                           \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\",\n                                           \"50–54\", \"55–59\", \"60–64\", \"65–69\", \"70–74\",\n                                           \"75–79\", \"80–84\", \"85–89\", \"90+\"))\n  )\n\nmedian_age &lt;- data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Total = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(Age) %&gt;%\n  mutate(cum_pop = cumsum(Total), prop = cum_pop / sum(Total)) %&gt;%\n  filter(prop &gt;= 0.5) %&gt;%\n  slice(1) %&gt;%\n  pull(Age)\n\nage_group_labels &lt;- levels(pyramid_data$AgeGroup)\nmedian_group_index &lt;- findInterval(median_age, seq(0, 100, by = 5))\nmedian_group &lt;- age_group_labels[median_group_index]\n\ntotal_males &lt;- pyramid_data %&gt;% filter(Sex == \"Males\") %&gt;% summarise(sum = sum(abs(ResidentCountSigned))) %&gt;% pull(sum)\ntotal_females &lt;- pyramid_data %&gt;% filter(Sex == \"Females\") %&gt;% summarise(sum = sum(ResidentCountSigned)) %&gt;% pull(sum)\n\nggplot(pyramid_data, aes(y = AgeGroup, x = ResidentCountSigned, fill = fill_color)) +\n  geom_col(width = 0.9) +\n  geom_text(aes(label = abs(ResidentCountSigned),\n                x = ifelse(ResidentCountSigned &lt; 0, ResidentCountSigned - 5000, ResidentCountSigned + 5000)),\n            hjust = ifelse(pyramid_data$ResidentCountSigned &lt; 0, 1, 0),\n            size = 3, color = \"black\") +\n  annotate(\"segment\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           xend = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group, yend = median_group,\n           linetype = \"dotted\", color = \"#A9A9A9\", linewidth = 0.9) +\n  annotate(\"text\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group,\n           label = paste0(\"Median: \", median_age),\n           hjust = 0, size = 2.8, color = \"black\", fontface = \"bold\") +\n  annotate(\"text\", y = \"0–4\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Males\\nTotal: \", format(total_males, big.mark = \",\")),\n           size = 2.6, color = \"#1E90FF\", fontface = \"bold\", hjust = 1) +\n  annotate(\"text\", y = \"0–4\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Females\\nTotal: \", format(total_females, big.mark = \",\")),\n           size = 2.6, color = \"#c51b8a\", fontface = \"bold\", hjust = 0) +\n  scale_fill_identity() +\n  scale_x_continuous(labels = abs, expand = expansion(mult = c(0.12, 0.12))) +\n  labs(\n    title = \"Singapore’s Shifting Age Structure (June 2024)\",\n    subtitle = \"Middle-age Population Dominates; Youth Base Shrinking, Elderly Segment Rising\",\n    x = NULL,\n    y = \"Age Group (Years)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 6)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 12)),\n    axis.text.y = element_text(size = 10),\n    axis.title.y = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe top chart shows the proportion of elderly residents in the top 10 planning areas. Outram has the highest share, with 26.9% of its population are seniors, followed by Ang Mo Kio (24.3%) and Bukit Merah (23.4%). These established towns may benefit from enhanced elderly-supportive environments, such as barrier-free access, senior-oriented amenities, and close-proximity services.\nThe bottom chart presents the elderly resident count, with Bedok having the largest at 60,770, followed by Tampines (49,700) and Hougang (44,640). This is largely due to their larger area size and population base. These towns would benefit from service scaling, such as Active Ageing Centres (AACs), public transport connectivity, and healthcare access.\nWith Singapore’s elderly population projected to reach one in four residents (DOS, 2024), it is important to consider both distribution by proportion and resident count for effective planning.\nThis dual perspective supports the Ministry of Health’s 2023 Action Plan, which aims to double eldercare centres by 2025 and enhance community-based support (MOH, 2023).\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelderly_data &lt;- data %&gt;% filter(Age &gt;= 65)\n\ntotal_pop &lt;- data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Total_Pop = sum(ResidentCount, na.rm = TRUE))\n\nelderly_count &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Elderly_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Pop))\n\nelderly_prop &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  left_join(total_pop, by = \"PlanningArea\") %&gt;%\n  mutate(Elderly_Proportion = Elderly_Pop / Total_Pop) %&gt;%\n  arrange(desc(Elderly_Proportion)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Proportion))\n\n# Plot\np1 &lt;- ggplot(elderly_prop, aes(x = Elderly_Proportion, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 0.35, by = 0.05),\n    labels = percent_format(accuracy = 1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Proportion (Age 65+)\",\n    x = \"Proportion of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\n\np2 &lt;- ggplot(elderly_count, aes(x = Elderly_Pop, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 70000, by = 10000),\n    labels = comma_format(),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Resident Count (Age 65+)\",\n    x = \"Number of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\np1 / p2\n\n\n\n\n\n\n\nInsights:\n\nTampines, Bedok, and Sengkang are top the list with over 250,000 residents each.\nMillennials (age 28–43) are the largest group in most PA, while Gen X dominates in Bedok, a mature estate.\nYounger generations (Gen Alpha and Gen Z) are more concentrated in newer towns like Sengkang, Punggol, and Jurong West, aligned with recent BTO developments that attract young families.\nThe distribution reflects a balanced generational mix, highlighting Singapore’s multigenerational living pattern—with both aging residents and young households sharing town spaces.\nThese trends align with Singapore’s Smart Nation and HDB’s ‘Designing for Life’ vision: fostering harmonious, inclusive communities where families of all ages can live, age, and thrive together through well-integrated facilities, technology, and people-first urban design.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate(Age = as.numeric(Age),\n         Generation = case_when(\n           Age &lt;= 9 ~ \"Gen Alpha (≤9)\",\n           Age &lt;= 27 ~ \"Gen Z (10–27)\",\n           Age &lt;= 43 ~ \"Millennials (28–43)\",\n           Age &lt;= 59 ~ \"Gen X (44–59)\",\n           Age &lt;= 77 ~ \"Baby Boomers (60–77)\",\n           TRUE ~ \"Silent Gen (78+)\"\n         ))\n\ngen_by_area &lt;- data %&gt;%\n  group_by(PlanningArea, Generation) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE), .groups = \"drop\")\n\ntop10_areas &lt;- gen_by_area %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(TotalPop = sum(ResidentCount)) %&gt;%\n  arrange(desc(TotalPop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PlanningArea)\n\ngen_top10 &lt;- gen_by_area %&gt;%\n  filter(PlanningArea %in% top10_areas) %&gt;%\n  mutate(\n    PlanningArea = fct_reorder(PlanningArea, ResidentCount, .fun = sum, .desc = TRUE),\n    Generation = factor(Generation, levels = c(\"Silent Gen (78+)\", \"Baby Boomers (60–77)\",\n                                               \"Gen X (44–59)\", \"Millennials (28–43)\",\n                                               \"Gen Z (10–27)\", \"Gen Alpha (≤9)\"))\n  )\n\ngen_colors &lt;- c(\n  \"Silent Gen (78+)\" = \"#c6dbef\",\n  \"Baby Boomers (60–77)\" = \"#6baed6\",\n  \"Gen X (44–59)\" = \"#b2df8a\",\n  \"Millennials (28–43)\" = \"#33a02c\",\n  \"Gen Z (10–27)\" = \"#fb9a99\",\n  \"Gen Alpha (≤9)\" = \"#e31a1c\"\n)\n\n#Plot\nggplot(gen_top10, aes(x = PlanningArea, y = ResidentCount, fill = Generation)) +\n  geom_col(width = 0.8, color = \"white\") +\n  scale_fill_manual(values = gen_colors) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, 300000, 50000),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Generational Composition of Top 10 Most Populated Planning Areas\",\n    subtitle = \"Younger generations dominate newer towns, while older cohorts concentrate in mature estates\",\n    x = \"Planning Area\",\n    y = \"Resident Count\",\n    fill = \"Generation\"\n  ) +\n  theme_clean(base_size = 12) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"right\"\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#summary",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Singapore’s demographic structure, based on June 2024 data, highlights a maturing society with a dominant working-age group and a median age of 42. The growing share of seniors and the narrowing base of younger age groups reflect the effects of population aging and low birth rates. Mature estates such as Outram have the highest proportion of elderly residents, while Bedok and Tampines house the largest absolute numbers. In contrast, newer towns like Sengkang and Punggol show higher concentrations of younger generations—particularly Gen Alpha and Gen Z—driven by recent BTO developments attracting young families. Millennials remain the largest generational group across most areas, reinforcing their role in shaping urban life. This evolving yet balanced generational landscape underscores the need for inclusive community planning that supports both young families and seniors—fostering intergenerational harmony and enabling families to live, age, and thrive together."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#references",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex01.html#references",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Department of Statistics Singapore. (2024). Population Trends 2024.\nRetrieved from: https://www.singstat.gov.sg/publications/population/population-trends\nMinistry of Health Singapore. (2023). Action Plan for Successful Ageing.\nRetrieved from: https://www.moh.gov.sg/newsroom/launch-of-the-2023-action-plan-for-successful-ageing\nHousing & Development Board (HDB). (2021). Designing for Life: Community Planning and Design Guide.\nRetrieved from: https://www.hdb.gov.sg/cs/infoweb/designing-for-life\nSmart Nation and Digital Government Office. (2023). Smart Nation: Empowering Everyone Through Technology.\nRetrieved from: https://www.smartnation.gov.sg\nSingapore Department of Statistics. (n.d.). National Statistical Standards.\nRetrieved from: https://www.singstat.gov.sg/standards"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 03B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip:\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\nThe animated bubble chart\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#overview",
    "title": "Hands-on Exercise 03B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip:\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#getting-started",
    "title": "Hands-on Exercise 03B",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 03B",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 03B",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03B/Hands-on_Ex03B.html#references",
    "title": "Hands-on Exercise 03B",
    "section": "",
    "text": "Building an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Several ggplot2 extensions are introduced in this section to enhance the elegance and effectiveness of statistical graphics, by:\n\nUsing ggrepel to control annotation placement\nApplying ggthemes and hrbrthemes for publication-quality visuals\nCombining plots using the patchwork package to create composite figures\n\n\n\n\n\n\nIn addition to tidyverse, four R packages will be used in this exercise:\n\nggrepel\nggthemes\nhrbrthemes\npatchwork\n\nCode chunk below are used to check if these packages have been installed and also will load them onto the R environment.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is one of the tidyversepackage.\nThere are seven attributes in the exam_data tibble data frame, with the following types:\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nOne of the challenges in plotting statistical graph is annotation especially when dealing with large data points, as shown in the example below:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text, by replacing geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\n\nThe new chart looks tidier with better visualization as shown below after applying the ggrepel function.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nggplot2 has eight built-in themes:\n\ntheme_gray(),\ntheme_bw(),\ntheme_classic(),\ntheme_dark(),\ntheme_light(),\ntheme_linedraw(),\ntheme_minimal(),\ntheme_void()\n\nRefer to this link to learn more about ggplot2 Themes.\nThe plot and code below is using theme_light() to see the distribution of Math Score\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Math scores\") \n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, The Wall Street Journal, and ‘Solid’, among others.\nIn the example below, The Wall Street Journal theme: theme_wsj() is used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Math scores \") +\n  theme_wsj()\n\n\n\n\nRefer to this vignette to learn other theme package available.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used, as shown in the plot and code below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second objective centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\nConsult this vignette to learn more.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nPoints to note from the plot and code chunk above:\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose figure with multiple graphs. In this section, we will create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n1st Plot To show the Math Scores distribution:\n\nThe PlotThe Code\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n2nd Plot to show the English Score Distribution:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score as shown below\nThe Plot to show the Math and English Score Distribution:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions that support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, we will go through ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure below shows a composite of two histograms created using patchwork.\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nTo learn more, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot, as shown below:\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_classic() of ggthemes package discussed earlier.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_classic()\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Several ggplot2 extensions are introduced in this section to enhance the elegance and effectiveness of statistical graphics, by:\n\nUsing ggrepel to control annotation placement\nApplying ggthemes and hrbrthemes for publication-quality visuals\nCombining plots using the patchwork package to create composite figures"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In addition to tidyverse, four R packages will be used in this exercise:\n\nggrepel\nggthemes\nhrbrthemes\npatchwork\n\nCode chunk below are used to check if these packages have been installed and also will load them onto the R environment.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is one of the tidyversepackage.\nThere are seven attributes in the exam_data tibble data frame, with the following types:\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "One of the challenges in plotting statistical graph is annotation especially when dealing with large data points, as shown in the example below:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text, by replacing geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\n\nThe new chart looks tidier with better visualization as shown below after applying the ggrepel function.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-themes",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "ggplot2 has eight built-in themes:\n\ntheme_gray(),\ntheme_bw(),\ntheme_classic(),\ntheme_dark(),\ntheme_light(),\ntheme_linedraw(),\ntheme_minimal(),\ntheme_void()\n\nRefer to this link to learn more about ggplot2 Themes.\nThe plot and code below is using theme_light() to see the distribution of Math Score\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +\n  ggtitle(\"Distribution of Math scores\") \n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, The Wall Street Journal, and ‘Solid’, among others.\nIn the example below, The Wall Street Journal theme: theme_wsj() is used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Math scores \") +\n  theme_wsj()\n\n\n\n\nRefer to this vignette to learn other theme package available.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used, as shown in the plot and code below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second objective centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\nConsult this vignette to learn more.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nPoints to note from the plot and code chunk above:\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose figure with multiple graphs. In this section, we will create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n1st Plot To show the Math Scores distribution:\n\nThe PlotThe Code\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n2nd Plot to show the English Score Distribution:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score as shown below\nThe Plot to show the Math and English Score Distribution:\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions that support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, we will go through ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure below shows a composite of two histograms created using patchwork.\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nTo learn more, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot, as shown below:\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_classic() of ggthemes package discussed earlier.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "R Graphics vs ggplot",
    "text": "R Graphics vs ggplot\nComparing between R graphics and ggplot\nR Graphics:\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nggplot:\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. \nggplot2 is an implementation of Grammar of Graphics.\nAesthetics of a plot are specified in the aes() function call."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-geometric-objects",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements: Geometric objects",
    "text": "Essential Grammatical Elements: Geometric objects\nGeometric objects are the actual marks we put on a plot. Examples include: geom_point, geom_line, geom_smooth, geom_bar, geom_histogram, geom_polygon, geom_map.\nA plot must have at least 1 geom. For complete list, please refer to here.\n\nGeometric objects: geom_(bar)\nThe code chunk below plots a bar chart using geom_bar()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nGeometric objects: geom_dotplot()\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\nGeometric objects: geom_histogram()\ngeom_histogram() is used to create a histogram\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of histogram.\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom-boxplot()\ngeom_boxplot() displays continuous value list and visualizes 5 summary statistics: median, two hinges and two whiskers, and all outliers.\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)       \n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom-violin()\ngeom_violin() plots are comparing multiple data distributions for easier visualization as they are compared side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()   \n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom-point()\ngeom_point() is useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\nCombining geom objects\ngeom objects can be combined as shown below combining geom_boxplot() and geom_point()\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-stat",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements: stat()",
    "text": "Essential Grammatical Elements: stat()\nThe Statistics functions statistically transform data, in a form of summary.\n\nThe stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"blue\",        \n               size=3)                    \n\n\n\n\n\n\n\n\n\n\nThe geom_point() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=3)                \n\n\n\n\n\n\n\n\n\n\nAdding a best fit curve : geom_smooth()\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of the graph can be enhanced by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-facets",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements: Facets",
    "text": "Essential Grammatical Elements: Facets\nFacet generates small trellis plot that each display a different subset of data.\nggplot2 has 2 types of facets: facet_grid() and facet_wrap()\n\nfacet_wrap()\nfacet_wrap() wraps 1d into 2d panels.\nThe code chunk below plots a trellis plot using facet_wrap()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nfacet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables.\nThe code chunk below plots a trellis plot using facet_grid()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements: Coordinates",
    "text": "Essential Grammatical Elements: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian\ncoord_flip\ncoord_fixed\ncoord_quickmap\n\n\ncoord_flip()\nThe code chunk below flips the horizontal bar into vertical bar chart using coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the y- and x-axis range\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-themes",
    "title": "Hands-on Exercise 1",
    "section": "Essential Grammatical Elements: Themes",
    "text": "Essential Grammatical Elements: Themes\nThemes control elemets of the graph that are not related to the data, such as the background colour, font size, gridlines and label colours.\nA list of theme can be found at this link.\nThe code chunk below plot a horizontal bar chart using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                           \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                              \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                          \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                    \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk.\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#learning-outcome",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#importing-data",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactivity",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactivity-1",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                           \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                              \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                          \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                    \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex03A/Hands-on_Ex03A.html#references",
    "title": "Hands-on Exercise 03A",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course.\nThe Reference materials used can be found in Prof Kam Tin Seong’s course Webpage.\nhttps://isss608-ay2024-25apr.netlify.app/"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Creating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It’s about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately.\n\n\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualization for the article.\n\n\n\n\n\nWe load the following R packages using the pacman::p_load() function:\n\ntidyverse: R packages designed for data science\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nscales: to provide the internal scaling infrastructure used by ggplot2\nggpubr to create publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, scales,\n               ggpubr) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\ndata &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\nWe first take a look at the data. Using the code below, we can get the details of the dataset which contains 60,424 rows and 6 columns.\n\nglimpse(data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\n\nWe notice that there is only one value in Time column (2024) which will not be used for further analysis, we will delete this column as per the code chunk below:\n\n\ndata &lt;- data %&gt;% select(-Time)\n\n\nWe will rename the column names in the dataset for clarity, as detailed provided by the Department of Statistics (DOS), as follows:\n\nPA → Planning Area\nSZ → Subzone\nPop → Resident Count\n\n\n\n\n\n\nSide Note:\n\n\n\nPlease note: according to the DOS accompanying documentation of this dataset, the population figures in the csv file have been rounded to the nearest 10, and as such, total counts may not sum exactly due to rounding adjustments.\n\n\n\ncolnames(data) &lt;- c(\"PlanningArea\", \"SubZone\", \"Age\", \"Sex\", \"ResidentCount\")\n\n\nNext, we observe that for the Age column, there is a value of : “90_and_over”. We will replace this value with “90” and change the data type from string/character to numeric and then create a new column to classify the age according to the age bracket in the interval of 5 years as per the standard age group published in DOS:\n\n\ndata &lt;- data %&gt;%\n  mutate(\n    # Normalize Age values to lowercase\n    Age = str_to_lower(Age),\n    \n    # Replace \"90_and_over\" with \"90\"\n    Age = ifelse(Age == \"90_and_over\", \"90\", Age),\n    \n    # Convert to numeric\n    Age = as.numeric(Age),\n    \n    # Create AgeGroup with standard bins\n    AgeGroup = cut(Age,\n                   breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89, Inf),\n                   labels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\", \"25–29\",\n                              \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\", \n                              \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \n                              \"80–84\", \"85–89\", \"90+\"),\n                   right = TRUE, include.lowest = TRUE)\n  )\n\n\nFurther observation of the dataset, we discover there are multiple rows with “0” values in the “Pop”/“ResidentCount” column. We will remove these rows as per the code chunk below, and calculate the number of rows and total population before and after the deletion to ensure completeness:\n\n\n# Total population before removing zero-pop rows\ntotal_population_before &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_before &lt;- nrow(data)\n\n# Count and show how many rows have 0 population\nzero_count &lt;- data %&gt;%\n  filter(ResidentCount == 0) %&gt;%\n  nrow()\n\ncat(\"Total population before cleaning:\", format(total_population_before, big.mark = \",\"), \"\\n\")\n\nTotal population before cleaning: 4,193,530 \n\ncat(\"Total rows before cleaning:\", total_rows_before, \"\\n\")\n\nTotal rows before cleaning: 60424 \n\ncat(\"Rows with 0 ResidentCount removed:\", zero_count, \"\\n\")\n\nRows with 0 ResidentCount removed: 23181 \n\n# Remove rows with 0 population\ndata &lt;- data %&gt;%\n  filter(ResidentCount &gt; 0)\n\n# Recalculate totals after cleaning\ntotal_population_after &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_after &lt;- nrow(data)\n\ncat(\"Total population after cleaning:\", format(total_population_after, big.mark = \",\"), \"\\n\")\n\nTotal population after cleaning: 4,193,530 \n\ncat(\"Remaining rows:\", total_rows_after, \"\\n\")\n\nRemaining rows: 37243 \n\n\n\n\n\nNext, Using the duplicated function, we see that there are no duplicate entries in the data.\n\ndata[duplicated(data),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PlanningArea &lt;chr&gt;, SubZone &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   ResidentCount &lt;dbl&gt;, AgeGroup &lt;fct&gt;\n\n\n\n\n\nWe run the code below to check for any missing values, and there is none.\n\ncolSums(is.na(data))\n\n PlanningArea       SubZone           Age           Sex ResidentCount \n            0             0             0             0             0 \n     AgeGroup \n            0 \n\n\n\n\n\nWe run an overview of the final dataset again before proceeding to the visualization. Final dataset contains 37,243 rows and 7 columns:\n\nglimpse(data)\n\nRows: 37,243\nColumns: 6\n$ PlanningArea  &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ SubZone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ ResidentCount &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ AgeGroup      &lt;fct&gt; 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 5–9, 5…\n\n\n\n\n\n\n\n\n\nInsights:\n\nThe population pyramid reveals a dominant working-age group between ages 30–44, forming the broadest segment of the chart, with largest age group for Female: from 35-39 age group: 166,150 and Males: from 30-34 age group with 155,630\nThe base is narrower, especially for those aged 0–14, which highlights the ongoing trend of declining birth rates.\nFemales significantly outnumber males from age 65 onwards, highlighting gender differences in life expectancy\nThe median age of 42 reinforces Singapore’s aging trend, with implications for healthcare and eldercare planning.\nThe median age of 42 underscores Singapore’s aging population, signaling increasing needs in healthcare, retirement, and eldercare.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    ResidentCountSigned = ifelse(Sex == \"Males\", -ResidentCount, ResidentCount),\n    fill_color = case_when(\n      Sex == \"Males\" ~ \"#4292c6\",\n      Sex == \"Females\" ~ \"#e377c2\",\n      TRUE ~ \"gray\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\",\n                                           \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\",\n                                           \"50–54\", \"55–59\", \"60–64\", \"65–69\", \"70–74\",\n                                           \"75–79\", \"80–84\", \"85–89\", \"90+\"))\n  )\n\nmedian_age &lt;- data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Total = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(Age) %&gt;%\n  mutate(cum_pop = cumsum(Total), prop = cum_pop / sum(Total)) %&gt;%\n  filter(prop &gt;= 0.5) %&gt;%\n  slice(1) %&gt;%\n  pull(Age)\n\nage_group_labels &lt;- levels(pyramid_data$AgeGroup)\nmedian_group_index &lt;- findInterval(median_age, seq(0, 100, by = 5))\nmedian_group &lt;- age_group_labels[median_group_index]\n\ntotal_males &lt;- pyramid_data %&gt;% filter(Sex == \"Males\") %&gt;% summarise(sum = sum(abs(ResidentCountSigned))) %&gt;% pull(sum)\ntotal_females &lt;- pyramid_data %&gt;% filter(Sex == \"Females\") %&gt;% summarise(sum = sum(ResidentCountSigned)) %&gt;% pull(sum)\n\nggplot(pyramid_data, aes(y = AgeGroup, x = ResidentCountSigned, fill = fill_color)) +\n  geom_col(width = 0.9) +\n  geom_text(aes(label = abs(ResidentCountSigned),\n                x = ifelse(ResidentCountSigned &lt; 0, ResidentCountSigned - 5000, ResidentCountSigned + 5000)),\n            hjust = ifelse(pyramid_data$ResidentCountSigned &lt; 0, 1, 0),\n            size = 3, color = \"black\") +\n  annotate(\"segment\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           xend = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group, yend = median_group,\n           linetype = \"dotted\", color = \"#A9A9A9\", linewidth = 0.9) +\n  annotate(\"text\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group,\n           label = paste0(\"Median: \", median_age),\n           hjust = 0, size = 2.8, color = \"black\", fontface = \"bold\") +\n  annotate(\"text\", y = \"0–4\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Males\\nTotal: \", format(total_males, big.mark = \",\")),\n           size = 2.6, color = \"#1E90FF\", fontface = \"bold\", hjust = 1) +\n  annotate(\"text\", y = \"0–4\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Females\\nTotal: \", format(total_females, big.mark = \",\")),\n           size = 2.6, color = \"#c51b8a\", fontface = \"bold\", hjust = 0) +\n  scale_fill_identity() +\n  scale_x_continuous(labels = abs, expand = expansion(mult = c(0.12, 0.12))) +\n  labs(\n    title = \"Singapore’s Shifting Age Structure (June 2024)\",\n    subtitle = \"Middle-age Population Dominates; Youth Base Shrinking, Elderly Segment Rising\",\n    x = NULL,\n    y = \"Age Group (Years)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 6)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 12)),\n    axis.text.y = element_text(size = 10),\n    axis.title.y = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe top chart shows the proportion of elderly residents in the top 10 planning areas. Outram has the highest share, with 26.9% of its population are seniors, followed by Ang Mo Kio (24.3%) and Bukit Merah (23.4%). These established towns may benefit from enhanced elderly-supportive environments, such as barrier-free access, senior-oriented amenities, and close-proximity services.\nThe bottom chart presents the elderly resident count, with Bedok having the largest at 60,770, followed by Tampines (49,700) and Hougang (44,640). This is largely due to their larger area size and population base. These towns would benefit from service scaling, such as Active Ageing Centres (AACs), public transport connectivity, and healthcare access.\nWith Singapore’s elderly population projected to reach one in four residents (DOS, 2024), it is important to consider both distribution by proportion and resident count for effective planning.\nThis dual perspective supports the Ministry of Health’s 2023 Action Plan, which aims to double eldercare centres by 2025 and enhance community-based support (MOH, 2023).\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelderly_data &lt;- data %&gt;% filter(Age &gt;= 65)\n\ntotal_pop &lt;- data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Total_Pop = sum(ResidentCount, na.rm = TRUE))\n\nelderly_count &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Elderly_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Pop))\n\nelderly_prop &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  left_join(total_pop, by = \"PlanningArea\") %&gt;%\n  mutate(Elderly_Proportion = Elderly_Pop / Total_Pop) %&gt;%\n  arrange(desc(Elderly_Proportion)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Proportion))\n\n# Plot\np1 &lt;- ggplot(elderly_prop, aes(x = Elderly_Proportion, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 0.35, by = 0.05),\n    labels = percent_format(accuracy = 1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Proportion (Age 65+)\",\n    x = \"Proportion of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\n\np2 &lt;- ggplot(elderly_count, aes(x = Elderly_Pop, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 70000, by = 10000),\n    labels = comma_format(),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Resident Count (Age 65+)\",\n    x = \"Number of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\np1 / p2\n\n\n\n\n\n\n\nInsights:\n\nTampines, Bedok, and Sengkang are top the list with over 250,000 residents each.\nMillennials (age 28–43) are the largest group in most PA, while Gen X dominates in Bedok, a mature estate.\nYounger generations (Gen Alpha and Gen Z) are more concentrated in newer towns like Sengkang, Punggol, and Jurong West, aligned with recent BTO developments that attract young families.\nThe distribution reflects a balanced generational mix, highlighting Singapore’s multigenerational living pattern—with both aging residents and young households sharing town spaces.\nThese trends align with Singapore’s Smart Nation and HDB’s ‘Designing for Life’ vision: fostering harmonious, inclusive communities where families of all ages can live, age, and thrive together through well-integrated facilities, technology, and people-first urban design.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate(Age = as.numeric(Age),\n         Generation = case_when(\n           Age &lt;= 9 ~ \"Gen Alpha (≤9)\",\n           Age &lt;= 27 ~ \"Gen Z (10–27)\",\n           Age &lt;= 43 ~ \"Millennials (28–43)\",\n           Age &lt;= 59 ~ \"Gen X (44–59)\",\n           Age &lt;= 77 ~ \"Baby Boomers (60–77)\",\n           TRUE ~ \"Silent Gen (78+)\"\n         ))\n\ngen_by_area &lt;- data %&gt;%\n  group_by(PlanningArea, Generation) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE), .groups = \"drop\")\n\ntop10_areas &lt;- gen_by_area %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(TotalPop = sum(ResidentCount)) %&gt;%\n  arrange(desc(TotalPop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PlanningArea)\n\ngen_top10 &lt;- gen_by_area %&gt;%\n  filter(PlanningArea %in% top10_areas) %&gt;%\n  mutate(\n    PlanningArea = fct_reorder(PlanningArea, ResidentCount, .fun = sum, .desc = TRUE),\n    Generation = factor(Generation, levels = c(\"Silent Gen (78+)\", \"Baby Boomers (60–77)\",\n                                               \"Gen X (44–59)\", \"Millennials (28–43)\",\n                                               \"Gen Z (10–27)\", \"Gen Alpha (≤9)\"))\n  )\n\ngen_colors &lt;- c(\n  \"Silent Gen (78+)\" = \"#c6dbef\",\n  \"Baby Boomers (60–77)\" = \"#6baed6\",\n  \"Gen X (44–59)\" = \"#b2df8a\",\n  \"Millennials (28–43)\" = \"#33a02c\",\n  \"Gen Z (10–27)\" = \"#fb9a99\",\n  \"Gen Alpha (≤9)\" = \"#e31a1c\"\n)\n\n#Plot\nggplot(gen_top10, aes(x = PlanningArea, y = ResidentCount, fill = Generation)) +\n  geom_col(width = 0.8, color = \"white\") +\n  scale_fill_manual(values = gen_colors) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, 300000, 50000),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Generational Composition of Top 10 Most Populated Planning Areas\",\n    subtitle = \"Younger generations dominate newer towns, while older cohorts concentrate in mature estates\",\n    x = \"Planning Area\",\n    y = \"Resident Count\",\n    fill = \"Generation\"\n  ) +\n  theme_clean(base_size = 12) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nSingapore’s demographic structure, based on June 2024 data, highlights a maturing society with a dominant working-age group and a median age of 42. The growing share of seniors and the narrowing base of younger age groups reflect the effects of population aging and low birth rates. Mature estates such as Outram have the highest proportion of elderly residents, while Bedok and Tampines house the largest absolute numbers. In contrast, newer towns like Sengkang and Punggol show higher concentrations of younger generations—particularly Gen Alpha and Gen Z—driven by recent BTO developments attracting young families. Millennials remain the largest generational group across most areas, reinforcing their role in shaping urban life. This evolving yet balanced generational landscape underscores the need for inclusive community planning that supports both young families and seniors—fostering intergenerational harmony and enabling families to live, age, and thrive together.\n\n\n\n\nDepartment of Statistics Singapore. (2024). Population Trends 2024.\nRetrieved from: https://www.singstat.gov.sg/publications/population/population-trends\nMinistry of Health Singapore. (2023). Action Plan for Successful Ageing.\nRetrieved from: https://www.moh.gov.sg/newsroom/launch-of-the-2023-action-plan-for-successful-ageing\nHousing & Development Board (HDB). (2021). Designing for Life: Community Planning and Design Guide.\nRetrieved from: https://www.hdb.gov.sg/cs/infoweb/designing-for-life\nSmart Nation and Digital Government Office. (2023). Smart Nation: Empowering Everyone Through Technology.\nRetrieved from: https://www.smartnation.gov.sg\nSingapore Department of Statistics. (n.d.). National Statistical Standards.\nRetrieved from: https://www.singstat.gov.sg/standards"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#overview",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#overview",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Creating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It’s about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#setting-the-scene",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#the-task",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualization for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#getting-started",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "We load the following R packages using the pacman::p_load() function:\n\ntidyverse: R packages designed for data science\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nscales: to provide the internal scaling infrastructure used by ggplot2\nggpubr to create publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, scales,\n               ggpubr) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\ndata &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\nWe first take a look at the data. Using the code below, we can get the details of the dataset which contains 60,424 rows and 6 columns.\n\nglimpse(data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\n\nWe notice that there is only one value in Time column (2024) which will not be used for further analysis, we will delete this column as per the code chunk below:\n\n\ndata &lt;- data %&gt;% select(-Time)\n\n\nWe will rename the column names in the dataset for clarity, as detailed provided by the Department of Statistics (DOS), as follows:\n\nPA → Planning Area\nSZ → Subzone\nPop → Resident Count\n\n\n\n\n\n\nSide Note:\n\n\n\nPlease note: according to the DOS accompanying documentation of this dataset, the population figures in the csv file have been rounded to the nearest 10, and as such, total counts may not sum exactly due to rounding adjustments.\n\n\n\ncolnames(data) &lt;- c(\"PlanningArea\", \"SubZone\", \"Age\", \"Sex\", \"ResidentCount\")\n\n\nNext, we observe that for the Age column, there is a value of : “90_and_over”. We will replace this value with “90” and change the data type from string/character to numeric and then create a new column to classify the age according to the age bracket in the interval of 5 years as per the standard age group published in DOS:\n\n\ndata &lt;- data %&gt;%\n  mutate(\n    # Normalize Age values to lowercase\n    Age = str_to_lower(Age),\n    \n    # Replace \"90_and_over\" with \"90\"\n    Age = ifelse(Age == \"90_and_over\", \"90\", Age),\n    \n    # Convert to numeric\n    Age = as.numeric(Age),\n    \n    # Create AgeGroup with standard bins\n    AgeGroup = cut(Age,\n                   breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89, Inf),\n                   labels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\", \"25–29\",\n                              \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\", \n                              \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \n                              \"80–84\", \"85–89\", \"90+\"),\n                   right = TRUE, include.lowest = TRUE)\n  )\n\n\nFurther observation of the dataset, we discover there are multiple rows with “0” values in the “Pop”/“ResidentCount” column. We will remove these rows as per the code chunk below, and calculate the number of rows and total population before and after the deletion to ensure completeness:\n\n\n# Total population before removing zero-pop rows\ntotal_population_before &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_before &lt;- nrow(data)\n\n# Count and show how many rows have 0 population\nzero_count &lt;- data %&gt;%\n  filter(ResidentCount == 0) %&gt;%\n  nrow()\n\ncat(\"Total population before cleaning:\", format(total_population_before, big.mark = \",\"), \"\\n\")\n\nTotal population before cleaning: 4,193,530 \n\ncat(\"Total rows before cleaning:\", total_rows_before, \"\\n\")\n\nTotal rows before cleaning: 60424 \n\ncat(\"Rows with 0 ResidentCount removed:\", zero_count, \"\\n\")\n\nRows with 0 ResidentCount removed: 23181 \n\n# Remove rows with 0 population\ndata &lt;- data %&gt;%\n  filter(ResidentCount &gt; 0)\n\n# Recalculate totals after cleaning\ntotal_population_after &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_after &lt;- nrow(data)\n\ncat(\"Total population after cleaning:\", format(total_population_after, big.mark = \",\"), \"\\n\")\n\nTotal population after cleaning: 4,193,530 \n\ncat(\"Remaining rows:\", total_rows_after, \"\\n\")\n\nRemaining rows: 37243 \n\n\n\n\n\nNext, Using the duplicated function, we see that there are no duplicate entries in the data.\n\ndata[duplicated(data),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PlanningArea &lt;chr&gt;, SubZone &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   ResidentCount &lt;dbl&gt;, AgeGroup &lt;fct&gt;\n\n\n\n\n\nWe run the code below to check for any missing values, and there is none.\n\ncolSums(is.na(data))\n\n PlanningArea       SubZone           Age           Sex ResidentCount \n            0             0             0             0             0 \n     AgeGroup \n            0 \n\n\n\n\n\nWe run an overview of the final dataset again before proceeding to the visualization. Final dataset contains 37,243 rows and 7 columns:\n\nglimpse(data)\n\nRows: 37,243\nColumns: 6\n$ PlanningArea  &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ SubZone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ ResidentCount &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ AgeGroup      &lt;fct&gt; 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 5–9, 5…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#data-visualization",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#data-visualization",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Insights:\n\nThe population pyramid reveals a dominant working-age group between ages 30–44, forming the broadest segment of the chart, with largest age group for Female: from 35-39 age group: 166,150 and Males: from 30-34 age group with 155,630\nThe base is narrower, especially for those aged 0–14, which highlights the ongoing trend of declining birth rates.\nFemales significantly outnumber males from age 65 onwards, highlighting gender differences in life expectancy\nThe median age of 42 reinforces Singapore’s aging trend, with implications for healthcare and eldercare planning.\nThe median age of 42 underscores Singapore’s aging population, signaling increasing needs in healthcare, retirement, and eldercare.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    ResidentCountSigned = ifelse(Sex == \"Males\", -ResidentCount, ResidentCount),\n    fill_color = case_when(\n      Sex == \"Males\" ~ \"#4292c6\",\n      Sex == \"Females\" ~ \"#e377c2\",\n      TRUE ~ \"gray\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\",\n                                           \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\",\n                                           \"50–54\", \"55–59\", \"60–64\", \"65–69\", \"70–74\",\n                                           \"75–79\", \"80–84\", \"85–89\", \"90+\"))\n  )\n\nmedian_age &lt;- data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Total = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(Age) %&gt;%\n  mutate(cum_pop = cumsum(Total), prop = cum_pop / sum(Total)) %&gt;%\n  filter(prop &gt;= 0.5) %&gt;%\n  slice(1) %&gt;%\n  pull(Age)\n\nage_group_labels &lt;- levels(pyramid_data$AgeGroup)\nmedian_group_index &lt;- findInterval(median_age, seq(0, 100, by = 5))\nmedian_group &lt;- age_group_labels[median_group_index]\n\ntotal_males &lt;- pyramid_data %&gt;% filter(Sex == \"Males\") %&gt;% summarise(sum = sum(abs(ResidentCountSigned))) %&gt;% pull(sum)\ntotal_females &lt;- pyramid_data %&gt;% filter(Sex == \"Females\") %&gt;% summarise(sum = sum(ResidentCountSigned)) %&gt;% pull(sum)\n\nggplot(pyramid_data, aes(y = AgeGroup, x = ResidentCountSigned, fill = fill_color)) +\n  geom_col(width = 0.9) +\n  geom_text(aes(label = abs(ResidentCountSigned),\n                x = ifelse(ResidentCountSigned &lt; 0, ResidentCountSigned - 5000, ResidentCountSigned + 5000)),\n            hjust = ifelse(pyramid_data$ResidentCountSigned &lt; 0, 1, 0),\n            size = 3, color = \"black\") +\n  annotate(\"segment\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           xend = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group, yend = median_group,\n           linetype = \"dotted\", color = \"#A9A9A9\", linewidth = 0.9) +\n  annotate(\"text\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group,\n           label = paste0(\"Median: \", median_age),\n           hjust = 0, size = 2.8, color = \"black\", fontface = \"bold\") +\n  annotate(\"text\", y = \"0–4\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Males\\nTotal: \", format(total_males, big.mark = \",\")),\n           size = 2.6, color = \"#1E90FF\", fontface = \"bold\", hjust = 1) +\n  annotate(\"text\", y = \"0–4\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Females\\nTotal: \", format(total_females, big.mark = \",\")),\n           size = 2.6, color = \"#c51b8a\", fontface = \"bold\", hjust = 0) +\n  scale_fill_identity() +\n  scale_x_continuous(labels = abs, expand = expansion(mult = c(0.12, 0.12))) +\n  labs(\n    title = \"Singapore’s Shifting Age Structure (June 2024)\",\n    subtitle = \"Middle-age Population Dominates; Youth Base Shrinking, Elderly Segment Rising\",\n    x = NULL,\n    y = \"Age Group (Years)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 6)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 12)),\n    axis.text.y = element_text(size = 10),\n    axis.title.y = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe top chart shows the proportion of elderly residents in the top 10 planning areas. Outram has the highest share, with 26.9% of its population are seniors, followed by Ang Mo Kio (24.3%) and Bukit Merah (23.4%). These established towns may benefit from enhanced elderly-supportive environments, such as barrier-free access, senior-oriented amenities, and close-proximity services.\nThe bottom chart presents the elderly resident count, with Bedok having the largest at 60,770, followed by Tampines (49,700) and Hougang (44,640). This is largely due to their larger area size and population base. These towns would benefit from service scaling, such as Active Ageing Centres (AACs), public transport connectivity, and healthcare access.\nWith Singapore’s elderly population projected to reach one in four residents (DOS, 2024), it is important to consider both distribution by proportion and resident count for effective planning.\nThis dual perspective supports the Ministry of Health’s 2023 Action Plan, which aims to double eldercare centres by 2025 and enhance community-based support (MOH, 2023).\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelderly_data &lt;- data %&gt;% filter(Age &gt;= 65)\n\ntotal_pop &lt;- data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Total_Pop = sum(ResidentCount, na.rm = TRUE))\n\nelderly_count &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Elderly_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Pop))\n\nelderly_prop &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  left_join(total_pop, by = \"PlanningArea\") %&gt;%\n  mutate(Elderly_Proportion = Elderly_Pop / Total_Pop) %&gt;%\n  arrange(desc(Elderly_Proportion)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Proportion))\n\n# Plot\np1 &lt;- ggplot(elderly_prop, aes(x = Elderly_Proportion, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 0.35, by = 0.05),\n    labels = percent_format(accuracy = 1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Proportion (Age 65+)\",\n    x = \"Proportion of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\n\np2 &lt;- ggplot(elderly_count, aes(x = Elderly_Pop, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 70000, by = 10000),\n    labels = comma_format(),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Resident Count (Age 65+)\",\n    x = \"Number of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\np1 / p2\n\n\n\n\n\n\n\nInsights:\n\nTampines, Bedok, and Sengkang are top the list with over 250,000 residents each.\nMillennials (age 28–43) are the largest group in most PA, while Gen X dominates in Bedok, a mature estate.\nYounger generations (Gen Alpha and Gen Z) are more concentrated in newer towns like Sengkang, Punggol, and Jurong West, aligned with recent BTO developments that attract young families.\nThe distribution reflects a balanced generational mix, highlighting Singapore’s multigenerational living pattern—with both aging residents and young households sharing town spaces.\nThese trends align with Singapore’s Smart Nation and HDB’s ‘Designing for Life’ vision: fostering harmonious, inclusive communities where families of all ages can live, age, and thrive together through well-integrated facilities, technology, and people-first urban design.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate(Age = as.numeric(Age),\n         Generation = case_when(\n           Age &lt;= 9 ~ \"Gen Alpha (≤9)\",\n           Age &lt;= 27 ~ \"Gen Z (10–27)\",\n           Age &lt;= 43 ~ \"Millennials (28–43)\",\n           Age &lt;= 59 ~ \"Gen X (44–59)\",\n           Age &lt;= 77 ~ \"Baby Boomers (60–77)\",\n           TRUE ~ \"Silent Gen (78+)\"\n         ))\n\ngen_by_area &lt;- data %&gt;%\n  group_by(PlanningArea, Generation) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE), .groups = \"drop\")\n\ntop10_areas &lt;- gen_by_area %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(TotalPop = sum(ResidentCount)) %&gt;%\n  arrange(desc(TotalPop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PlanningArea)\n\ngen_top10 &lt;- gen_by_area %&gt;%\n  filter(PlanningArea %in% top10_areas) %&gt;%\n  mutate(\n    PlanningArea = fct_reorder(PlanningArea, ResidentCount, .fun = sum, .desc = TRUE),\n    Generation = factor(Generation, levels = c(\"Silent Gen (78+)\", \"Baby Boomers (60–77)\",\n                                               \"Gen X (44–59)\", \"Millennials (28–43)\",\n                                               \"Gen Z (10–27)\", \"Gen Alpha (≤9)\"))\n  )\n\ngen_colors &lt;- c(\n  \"Silent Gen (78+)\" = \"#c6dbef\",\n  \"Baby Boomers (60–77)\" = \"#6baed6\",\n  \"Gen X (44–59)\" = \"#b2df8a\",\n  \"Millennials (28–43)\" = \"#33a02c\",\n  \"Gen Z (10–27)\" = \"#fb9a99\",\n  \"Gen Alpha (≤9)\" = \"#e31a1c\"\n)\n\n#Plot\nggplot(gen_top10, aes(x = PlanningArea, y = ResidentCount, fill = Generation)) +\n  geom_col(width = 0.8, color = \"white\") +\n  scale_fill_manual(values = gen_colors) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, 300000, 50000),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Generational Composition of Top 10 Most Populated Planning Areas\",\n    subtitle = \"Younger generations dominate newer towns, while older cohorts concentrate in mature estates\",\n    x = \"Planning Area\",\n    y = \"Resident Count\",\n    fill = \"Generation\"\n  ) +\n  theme_clean(base_size = 12) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"right\"\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#summary",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#summary",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Singapore’s demographic structure, based on June 2024 data, highlights a maturing society with a dominant working-age group and a median age of 42. The growing share of seniors and the narrowing base of younger age groups reflect the effects of population aging and low birth rates. Mature estates such as Outram have the highest proportion of elderly residents, while Bedok and Tampines house the largest absolute numbers. In contrast, newer towns like Sengkang and Punggol show higher concentrations of younger generations—particularly Gen Alpha and Gen Z—driven by recent BTO developments attracting young families. Millennials remain the largest generational group across most areas, reinforcing their role in shaping urban life. This evolving yet balanced generational landscape underscores the need for inclusive community planning that supports both young families and seniors—fostering intergenerational harmony and enabling families to live, age, and thrive together."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#references",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-home_Ex1.html#references",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Department of Statistics Singapore. (2024). Population Trends 2024.\nRetrieved from: https://www.singstat.gov.sg/publications/population/population-trends\nMinistry of Health Singapore. (2023). Action Plan for Successful Ageing.\nRetrieved from: https://www.moh.gov.sg/newsroom/launch-of-the-2023-action-plan-for-successful-ageing\nHousing & Development Board (HDB). (2021). Designing for Life: Community Planning and Design Guide.\nRetrieved from: https://www.hdb.gov.sg/cs/infoweb/designing-for-life\nSmart Nation and Digital Government Office. (2023). Smart Nation: Empowering Everyone Through Technology.\nRetrieved from: https://www.smartnation.gov.sg\nSingapore Department of Statistics. (n.d.). National Statistical Standards.\nRetrieved from: https://www.singstat.gov.sg/standards"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Creating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It’s about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately.\n\n\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualization for the article.\n\n\n\n\n\nWe load the following R packages using the pacman::p_load() function:\n\ntidyverse: R packages designed for data science\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nscales: to provide the internal scaling infrastructure used by ggplot2\nggpubr to create publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, scales,\n               ggpubr) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\ndata &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\nWe first take a look at the data. Using the code below, we can get the details of the dataset which contains 60,424 rows and 6 columns.\n\nglimpse(data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\n\nWe notice that there is only one value in Time column (2024) which will not be used for further analysis, we will delete this column as per the code chunk below:\n\n\ndata &lt;- data %&gt;% select(-Time)\n\n\nWe will rename the column names in the dataset for clarity, as detailed provided by the Department of Statistics (DOS), as follows:\n\nPA → Planning Area\nSZ → Subzone\nPop → Resident Count\n\n\n\n\n\n\nSide Note:\n\n\n\nPlease note: according to the DOS accompanying documentation of this dataset, the population figures in the csv file have been rounded to the nearest 10, and as such, total counts may not sum exactly due to rounding adjustments.\n\n\n\ncolnames(data) &lt;- c(\"PlanningArea\", \"SubZone\", \"Age\", \"Sex\", \"ResidentCount\")\n\n\nNext, we observe that for the Age column, there is a value of : “90_and_over”. We will replace this value with “90” and change the data type from string/character to numeric and then create a new column to classify the age according to the age bracket in the interval of 5 years as per the standard age group published in DOS:\n\n\ndata &lt;- data %&gt;%\n  mutate(\n    # Normalize Age values to lowercase\n    Age = str_to_lower(Age),\n    \n    # Replace \"90_and_over\" with \"90\"\n    Age = ifelse(Age == \"90_and_over\", \"90\", Age),\n    \n    # Convert to numeric\n    Age = as.numeric(Age),\n    \n    # Create AgeGroup with standard bins\n    AgeGroup = cut(Age,\n                   breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89, Inf),\n                   labels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\", \"25–29\",\n                              \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\", \n                              \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \n                              \"80–84\", \"85–89\", \"90+\"),\n                   right = TRUE, include.lowest = TRUE)\n  )\n\n\nFurther observation of the dataset, we discover there are multiple rows with “0” values in the “Pop”/“ResidentCount” column. We will remove these rows as per the code chunk below, and calculate the number of rows and total population before and after the deletion to ensure completeness:\n\n\n# Total population before removing zero-pop rows\ntotal_population_before &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_before &lt;- nrow(data)\n\n# Count and show how many rows have 0 population\nzero_count &lt;- data %&gt;%\n  filter(ResidentCount == 0) %&gt;%\n  nrow()\n\ncat(\"Total population before cleaning:\", format(total_population_before, big.mark = \",\"), \"\\n\")\n\nTotal population before cleaning: 4,193,530 \n\ncat(\"Total rows before cleaning:\", total_rows_before, \"\\n\")\n\nTotal rows before cleaning: 60424 \n\ncat(\"Rows with 0 ResidentCount removed:\", zero_count, \"\\n\")\n\nRows with 0 ResidentCount removed: 23181 \n\n# Remove rows with 0 population\ndata &lt;- data %&gt;%\n  filter(ResidentCount &gt; 0)\n\n# Recalculate totals after cleaning\ntotal_population_after &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_after &lt;- nrow(data)\n\ncat(\"Total population after cleaning:\", format(total_population_after, big.mark = \",\"), \"\\n\")\n\nTotal population after cleaning: 4,193,530 \n\ncat(\"Remaining rows:\", total_rows_after, \"\\n\")\n\nRemaining rows: 37243 \n\n\n\n\n\nNext, Using the duplicated function, we see that there are no duplicate entries in the data.\n\ndata[duplicated(data),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PlanningArea &lt;chr&gt;, SubZone &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   ResidentCount &lt;dbl&gt;, AgeGroup &lt;fct&gt;\n\n\n\n\n\nWe run the code below to check for any missing values, and there is none.\n\ncolSums(is.na(data))\n\n PlanningArea       SubZone           Age           Sex ResidentCount \n            0             0             0             0             0 \n     AgeGroup \n            0 \n\n\n\n\n\nWe run an overview of the final dataset again before proceeding to the visualization. Final dataset contains 37,243 rows and 7 columns:\n\nglimpse(data)\n\nRows: 37,243\nColumns: 6\n$ PlanningArea  &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ SubZone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ ResidentCount &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ AgeGroup      &lt;fct&gt; 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 5–9, 5…\n\n\n\n\n\n\n\n\n\nInsights:\n\nThe population pyramid reveals a dominant working-age group between ages 30–44, forming the broadest segment of the chart, with largest age group for Female: from 35-39 age group: 166,150 and Males: from 30-34 age group with 155,630\nThe base is narrower, especially for those aged 0–14, which highlights the ongoing trend of declining birth rates.\nFemales significantly outnumber males from age 65 onwards, highlighting gender differences in life expectancy\nThe median age of 42 reinforces Singapore’s aging trend, with implications for healthcare and eldercare planning.\nThe median age of 42 underscores Singapore’s aging population, signaling increasing needs in healthcare, retirement, and eldercare.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    ResidentCountSigned = ifelse(Sex == \"Males\", -ResidentCount, ResidentCount),\n    fill_color = case_when(\n      Sex == \"Males\" ~ \"#4292c6\",\n      Sex == \"Females\" ~ \"#e377c2\",\n      TRUE ~ \"gray\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\",\n                                           \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\",\n                                           \"50–54\", \"55–59\", \"60–64\", \"65–69\", \"70–74\",\n                                           \"75–79\", \"80–84\", \"85–89\", \"90+\"))\n  )\n\nmedian_age &lt;- data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Total = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(Age) %&gt;%\n  mutate(cum_pop = cumsum(Total), prop = cum_pop / sum(Total)) %&gt;%\n  filter(prop &gt;= 0.5) %&gt;%\n  slice(1) %&gt;%\n  pull(Age)\n\nage_group_labels &lt;- levels(pyramid_data$AgeGroup)\nmedian_group_index &lt;- findInterval(median_age, seq(0, 100, by = 5))\nmedian_group &lt;- age_group_labels[median_group_index]\n\ntotal_males &lt;- pyramid_data %&gt;% filter(Sex == \"Males\") %&gt;% summarise(sum = sum(abs(ResidentCountSigned))) %&gt;% pull(sum)\ntotal_females &lt;- pyramid_data %&gt;% filter(Sex == \"Females\") %&gt;% summarise(sum = sum(ResidentCountSigned)) %&gt;% pull(sum)\n\nggplot(pyramid_data, aes(y = AgeGroup, x = ResidentCountSigned, fill = fill_color)) +\n  geom_col(width = 0.9) +\n  geom_text(aes(label = abs(ResidentCountSigned),\n                x = ifelse(ResidentCountSigned &lt; 0, ResidentCountSigned - 5000, ResidentCountSigned + 5000)),\n            hjust = ifelse(pyramid_data$ResidentCountSigned &lt; 0, 1, 0),\n            size = 3, color = \"black\") +\n  annotate(\"segment\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           xend = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group, yend = median_group,\n           linetype = \"dotted\", color = \"#A9A9A9\", linewidth = 0.9) +\n  annotate(\"text\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group,\n           label = paste0(\"Median: \", median_age),\n           hjust = 0, size = 2.8, color = \"black\", fontface = \"bold\") +\n  annotate(\"text\", y = \"0–4\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Males\\nTotal: \", format(total_males, big.mark = \",\")),\n           size = 2.6, color = \"#1E90FF\", fontface = \"bold\", hjust = 1) +\n  annotate(\"text\", y = \"0–4\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Females\\nTotal: \", format(total_females, big.mark = \",\")),\n           size = 2.6, color = \"#c51b8a\", fontface = \"bold\", hjust = 0) +\n  scale_fill_identity() +\n  scale_x_continuous(labels = abs, expand = expansion(mult = c(0.12, 0.12))) +\n  labs(\n    title = \"Singapore’s Shifting Age Structure (June 2024)\",\n    subtitle = \"Middle-age Population Dominates; Youth Base Shrinking, Elderly Segment Rising\",\n    x = NULL,\n    y = \"Age Group (Years)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 6)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 12)),\n    axis.text.y = element_text(size = 10),\n    axis.title.y = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe top chart shows the proportion of elderly residents in the top 10 planning areas. Outram has the highest share, with 26.9% of its population are seniors, followed by Ang Mo Kio (24.3%) and Bukit Merah (23.4%). These established towns may benefit from enhanced elderly-supportive environments, such as barrier-free access, senior-oriented amenities, and close-proximity services.\nThe bottom chart presents the elderly resident count, with Bedok having the largest at 60,770, followed by Tampines (49,700) and Hougang (44,640). This is largely due to their larger area size and population base. These towns would benefit from service scaling, such as Active Ageing Centres (AACs), public transport connectivity, and healthcare access.\nWith Singapore’s elderly population projected to reach one in four residents (DOS, 2024), it is important to consider both distribution by proportion and resident count for effective planning.\nThis dual perspective supports the Ministry of Health’s 2023 Action Plan, which aims to double eldercare centres by 2025 and enhance community-based support (MOH, 2023).\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelderly_data &lt;- data %&gt;% filter(Age &gt;= 65)\n\ntotal_pop &lt;- data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Total_Pop = sum(ResidentCount, na.rm = TRUE))\n\nelderly_count &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Elderly_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Pop))\n\nelderly_prop &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  left_join(total_pop, by = \"PlanningArea\") %&gt;%\n  mutate(Elderly_Proportion = Elderly_Pop / Total_Pop) %&gt;%\n  arrange(desc(Elderly_Proportion)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Proportion))\n\n# Plot\np1 &lt;- ggplot(elderly_prop, aes(x = Elderly_Proportion, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 0.35, by = 0.05),\n    labels = percent_format(accuracy = 1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Proportion (Age 65+)\",\n    x = \"Proportion of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\n\np2 &lt;- ggplot(elderly_count, aes(x = Elderly_Pop, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 70000, by = 10000),\n    labels = comma_format(),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Resident Count (Age 65+)\",\n    x = \"Number of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\np1 / p2\n\n\n\n\n\n\n\nInsights:\n\nTampines, Bedok, and Sengkang are top the list with over 250,000 residents each.\nMillennials (age 28–43) are the largest group in most PA, while Gen X dominates in Bedok, a mature estate.\nYounger generations (Gen Alpha and Gen Z) are more concentrated in newer towns like Sengkang, Punggol, and Jurong West, aligned with recent BTO developments that attract young families.\nThe distribution reflects a balanced generational mix, highlighting Singapore’s multigenerational living pattern—with both aging residents and young households sharing town spaces.\nThese trends align with Singapore’s Smart Nation and HDB’s ‘Designing for Life’ vision: fostering harmonious, inclusive communities where families of all ages can live, age, and thrive together through well-integrated facilities, technology, and people-first urban design.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate(Age = as.numeric(Age),\n         Generation = case_when(\n           Age &lt;= 9 ~ \"Gen Alpha (≤9)\",\n           Age &lt;= 27 ~ \"Gen Z (10–27)\",\n           Age &lt;= 43 ~ \"Millennials (28–43)\",\n           Age &lt;= 59 ~ \"Gen X (44–59)\",\n           Age &lt;= 77 ~ \"Baby Boomers (60–77)\",\n           TRUE ~ \"Silent Gen (78+)\"\n         ))\n\ngen_by_area &lt;- data %&gt;%\n  group_by(PlanningArea, Generation) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE), .groups = \"drop\")\n\ntop10_areas &lt;- gen_by_area %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(TotalPop = sum(ResidentCount)) %&gt;%\n  arrange(desc(TotalPop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PlanningArea)\n\ngen_top10 &lt;- gen_by_area %&gt;%\n  filter(PlanningArea %in% top10_areas) %&gt;%\n  mutate(\n    PlanningArea = fct_reorder(PlanningArea, ResidentCount, .fun = sum, .desc = TRUE),\n    Generation = factor(Generation, levels = c(\"Silent Gen (78+)\", \"Baby Boomers (60–77)\",\n                                               \"Gen X (44–59)\", \"Millennials (28–43)\",\n                                               \"Gen Z (10–27)\", \"Gen Alpha (≤9)\"))\n  )\n\ngen_colors &lt;- c(\n  \"Silent Gen (78+)\" = \"#c6dbef\",\n  \"Baby Boomers (60–77)\" = \"#6baed6\",\n  \"Gen X (44–59)\" = \"#b2df8a\",\n  \"Millennials (28–43)\" = \"#33a02c\",\n  \"Gen Z (10–27)\" = \"#fb9a99\",\n  \"Gen Alpha (≤9)\" = \"#e31a1c\"\n)\n\n#Plot\nggplot(gen_top10, aes(x = PlanningArea, y = ResidentCount, fill = Generation)) +\n  geom_col(width = 0.8, color = \"white\") +\n  scale_fill_manual(values = gen_colors) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, 300000, 50000),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Generational Composition of Top 10 Most Populated Planning Areas\",\n    subtitle = \"Younger generations dominate newer towns, while older cohorts concentrate in mature estates\",\n    x = \"Planning Area\",\n    y = \"Resident Count\",\n    fill = \"Generation\"\n  ) +\n  theme_clean(base_size = 12) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nSingapore’s demographic structure, based on June 2024 data, highlights a maturing society with a dominant working-age group and a median age of 42. The growing share of seniors and the narrowing base of younger age groups reflect the effects of population aging and low birth rates. Mature estates such as Outram have the highest proportion of elderly residents, while Bedok and Tampines house the largest absolute numbers. In contrast, newer towns like Sengkang and Punggol show higher concentrations of younger generations—particularly Gen Alpha and Gen Z—driven by recent BTO developments attracting young families. Millennials remain the largest generational group across most areas, reinforcing their role in shaping urban life. This evolving yet balanced generational landscape underscores the need for inclusive community planning that supports both young families and seniors—fostering intergenerational harmony and enabling families to live, age, and thrive together.\n\n\n\n\nDepartment of Statistics Singapore. (2024). Population Trends 2024.\nRetrieved from: https://www.singstat.gov.sg/publications/population/population-trends\nMinistry of Health Singapore. (2023). Action Plan for Successful Ageing.\nRetrieved from: https://www.moh.gov.sg/newsroom/launch-of-the-2023-action-plan-for-successful-ageing\nHousing & Development Board (HDB). (2021). Designing for Life: Community Planning and Design Guide.\nRetrieved from: https://www.hdb.gov.sg/cs/infoweb/designing-for-life\nSmart Nation and Digital Government Office. (2023). Smart Nation: Empowering Everyone Through Technology.\nRetrieved from: https://www.smartnation.gov.sg\nSingapore Department of Statistics. (n.d.). National Statistical Standards.\nRetrieved from: https://www.singstat.gov.sg/standards"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#overview",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#overview",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Creating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It’s about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#setting-the-scene",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#the-task",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, we are tasked to prepare at most three data visualization for the article."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#getting-started",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "We load the following R packages using the pacman::p_load() function:\n\ntidyverse: R packages designed for data science\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels\nggthemes: to use additional themes for ggplot2\npatchwork: to prepare composite figure created using ggplot2\nscales: to provide the internal scaling infrastructure used by ggplot2\nggpubr to create publication ready ggplot2 plots.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, scales,\n               ggpubr) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\ndata &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\nWe first take a look at the data. Using the code below, we can get the details of the dataset which contains 60,424 rows and 6 columns.\n\nglimpse(data)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\n\nWe notice that there is only one value in Time column (2024) which will not be used for further analysis, we will delete this column as per the code chunk below:\n\n\ndata &lt;- data %&gt;% select(-Time)\n\n\nWe will rename the column names in the dataset for clarity, as detailed provided by the Department of Statistics (DOS), as follows:\n\nPA → Planning Area\nSZ → Subzone\nPop → Resident Count\n\n\n\n\n\n\nSide Note:\n\n\n\nPlease note: according to the DOS accompanying documentation of this dataset, the population figures in the csv file have been rounded to the nearest 10, and as such, total counts may not sum exactly due to rounding adjustments.\n\n\n\ncolnames(data) &lt;- c(\"PlanningArea\", \"SubZone\", \"Age\", \"Sex\", \"ResidentCount\")\n\n\nNext, we observe that for the Age column, there is a value of : “90_and_over”. We will replace this value with “90” and change the data type from string/character to numeric and then create a new column to classify the age according to the age bracket in the interval of 5 years as per the standard age group published in DOS:\n\n\ndata &lt;- data %&gt;%\n  mutate(\n    # Normalize Age values to lowercase\n    Age = str_to_lower(Age),\n    \n    # Replace \"90_and_over\" with \"90\"\n    Age = ifelse(Age == \"90_and_over\", \"90\", Age),\n    \n    # Convert to numeric\n    Age = as.numeric(Age),\n    \n    # Create AgeGroup with standard bins\n    AgeGroup = cut(Age,\n                   breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79,84,89, Inf),\n                   labels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\", \"25–29\",\n                              \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\", \n                              \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \n                              \"80–84\", \"85–89\", \"90+\"),\n                   right = TRUE, include.lowest = TRUE)\n  )\n\n\nFurther observation of the dataset, we discover there are multiple rows with “0” values in the “Pop”/“ResidentCount” column. We will remove these rows as per the code chunk below, and calculate the number of rows and total population before and after the deletion to ensure completeness:\n\n\n# Total population before removing zero-pop rows\ntotal_population_before &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_before &lt;- nrow(data)\n\n# Count and show how many rows have 0 population\nzero_count &lt;- data %&gt;%\n  filter(ResidentCount == 0) %&gt;%\n  nrow()\n\ncat(\"Total population before cleaning:\", format(total_population_before, big.mark = \",\"), \"\\n\")\n\nTotal population before cleaning: 4,193,530 \n\ncat(\"Total rows before cleaning:\", total_rows_before, \"\\n\")\n\nTotal rows before cleaning: 60424 \n\ncat(\"Rows with 0 ResidentCount removed:\", zero_count, \"\\n\")\n\nRows with 0 ResidentCount removed: 23181 \n\n# Remove rows with 0 population\ndata &lt;- data %&gt;%\n  filter(ResidentCount &gt; 0)\n\n# Recalculate totals after cleaning\ntotal_population_after &lt;- sum(data$ResidentCount, na.rm = TRUE)\ntotal_rows_after &lt;- nrow(data)\n\ncat(\"Total population after cleaning:\", format(total_population_after, big.mark = \",\"), \"\\n\")\n\nTotal population after cleaning: 4,193,530 \n\ncat(\"Remaining rows:\", total_rows_after, \"\\n\")\n\nRemaining rows: 37243 \n\n\n\n\n\nNext, Using the duplicated function, we see that there are no duplicate entries in the data.\n\ndata[duplicated(data),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PlanningArea &lt;chr&gt;, SubZone &lt;chr&gt;, Age &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   ResidentCount &lt;dbl&gt;, AgeGroup &lt;fct&gt;\n\n\n\n\n\nWe run the code below to check for any missing values, and there is none.\n\ncolSums(is.na(data))\n\n PlanningArea       SubZone           Age           Sex ResidentCount \n            0             0             0             0             0 \n     AgeGroup \n            0 \n\n\n\n\n\nWe run an overview of the final dataset again before proceeding to the visualization. Final dataset contains 37,243 rows and 7 columns:\n\nglimpse(data)\n\nRows: 37,243\nColumns: 6\n$ PlanningArea  &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ SubZone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ ResidentCount &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ AgeGroup      &lt;fct&gt; 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 0–4, 5–9, 5…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#data-visualization",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#data-visualization",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Insights:\n\nThe population pyramid reveals a dominant working-age group between ages 30–44, forming the broadest segment of the chart, with largest age group for Female: from 35-39 age group: 166,150 and Males: from 30-34 age group with 155,630\nThe base is narrower, especially for those aged 0–14, which highlights the ongoing trend of declining birth rates.\nFemales significantly outnumber males from age 65 onwards, highlighting gender differences in life expectancy\nThe median age of 42 reinforces Singapore’s aging trend, with implications for healthcare and eldercare planning.\nThe median age of 42 underscores Singapore’s aging population, signaling increasing needs in healthcare, retirement, and eldercare.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    ResidentCountSigned = ifelse(Sex == \"Males\", -ResidentCount, ResidentCount),\n    fill_color = case_when(\n      Sex == \"Males\" ~ \"#4292c6\",\n      Sex == \"Females\" ~ \"#e377c2\",\n      TRUE ~ \"gray\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"0–4\", \"5–9\", \"10–14\", \"15–19\", \"20–24\",\n                                           \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\",\n                                           \"50–54\", \"55–59\", \"60–64\", \"65–69\", \"70–74\",\n                                           \"75–79\", \"80–84\", \"85–89\", \"90+\"))\n  )\n\nmedian_age &lt;- data %&gt;%\n  group_by(Age) %&gt;%\n  summarise(Total = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(Age) %&gt;%\n  mutate(cum_pop = cumsum(Total), prop = cum_pop / sum(Total)) %&gt;%\n  filter(prop &gt;= 0.5) %&gt;%\n  slice(1) %&gt;%\n  pull(Age)\n\nage_group_labels &lt;- levels(pyramid_data$AgeGroup)\nmedian_group_index &lt;- findInterval(median_age, seq(0, 100, by = 5))\nmedian_group &lt;- age_group_labels[median_group_index]\n\ntotal_males &lt;- pyramid_data %&gt;% filter(Sex == \"Males\") %&gt;% summarise(sum = sum(abs(ResidentCountSigned))) %&gt;% pull(sum)\ntotal_females &lt;- pyramid_data %&gt;% filter(Sex == \"Females\") %&gt;% summarise(sum = sum(ResidentCountSigned)) %&gt;% pull(sum)\n\nggplot(pyramid_data, aes(y = AgeGroup, x = ResidentCountSigned, fill = fill_color)) +\n  geom_col(width = 0.9) +\n  geom_text(aes(label = abs(ResidentCountSigned),\n                x = ifelse(ResidentCountSigned &lt; 0, ResidentCountSigned - 5000, ResidentCountSigned + 5000)),\n            hjust = ifelse(pyramid_data$ResidentCountSigned &lt; 0, 1, 0),\n            size = 3, color = \"black\") +\n  annotate(\"segment\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           xend = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group, yend = median_group,\n           linetype = \"dotted\", color = \"#A9A9A9\", linewidth = 0.9) +\n  annotate(\"text\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 1.5,\n           y = median_group,\n           label = paste0(\"Median: \", median_age),\n           hjust = 0, size = 2.8, color = \"black\", fontface = \"bold\") +\n  annotate(\"text\", y = \"0–4\",\n           x = -max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Males\\nTotal: \", format(total_males, big.mark = \",\")),\n           size = 2.6, color = \"#1E90FF\", fontface = \"bold\", hjust = 1) +\n  annotate(\"text\", y = \"0–4\",\n           x = max(abs(pyramid_data$ResidentCountSigned)) * 0.95,\n           label = paste0(\"Females\\nTotal: \", format(total_females, big.mark = \",\")),\n           size = 2.6, color = \"#c51b8a\", fontface = \"bold\", hjust = 0) +\n  scale_fill_identity() +\n  scale_x_continuous(labels = abs, expand = expansion(mult = c(0.12, 0.12))) +\n  labs(\n    title = \"Singapore’s Shifting Age Structure (June 2024)\",\n    subtitle = \"Middle-age Population Dominates; Youth Base Shrinking, Elderly Segment Rising\",\n    x = NULL,\n    y = \"Age Group (Years)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 6)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 12)),\n    axis.text.y = element_text(size = 10),\n    axis.title.y = element_text(size = 11, face = \"bold\"),\n    axis.text.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\nInsights:\n\nThe top chart shows the proportion of elderly residents in the top 10 planning areas. Outram has the highest share, with 26.9% of its population are seniors, followed by Ang Mo Kio (24.3%) and Bukit Merah (23.4%). These established towns may benefit from enhanced elderly-supportive environments, such as barrier-free access, senior-oriented amenities, and close-proximity services.\nThe bottom chart presents the elderly resident count, with Bedok having the largest at 60,770, followed by Tampines (49,700) and Hougang (44,640). This is largely due to their larger area size and population base. These towns would benefit from service scaling, such as Active Ageing Centres (AACs), public transport connectivity, and healthcare access.\nWith Singapore’s elderly population projected to reach one in four residents (DOS, 2024), it is important to consider both distribution by proportion and resident count for effective planning.\nThis dual perspective supports the Ministry of Health’s 2023 Action Plan, which aims to double eldercare centres by 2025 and enhance community-based support (MOH, 2023).\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelderly_data &lt;- data %&gt;% filter(Age &gt;= 65)\n\ntotal_pop &lt;- data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Total_Pop = sum(ResidentCount, na.rm = TRUE))\n\nelderly_count &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Elderly_Pop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Pop))\n\nelderly_prop &lt;- elderly_data %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(Elderly_Pop = sum(ResidentCount, na.rm = TRUE)) %&gt;%\n  left_join(total_pop, by = \"PlanningArea\") %&gt;%\n  mutate(Elderly_Proportion = Elderly_Pop / Total_Pop) %&gt;%\n  arrange(desc(Elderly_Proportion)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  mutate(PlanningArea = fct_reorder(PlanningArea, Elderly_Proportion))\n\n# Plot\np1 &lt;- ggplot(elderly_prop, aes(x = Elderly_Proportion, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 0.35, by = 0.05),\n    labels = percent_format(accuracy = 1),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Proportion (Age 65+)\",\n    x = \"Proportion of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\n\np2 &lt;- ggplot(elderly_count, aes(x = Elderly_Pop, y = PlanningArea)) +\n  geom_col(fill = \"#4DAF4A\", width = 0.85) +\n  scale_x_continuous(\n    breaks = seq(0, 70000, by = 10000),\n    labels = comma_format(),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Top 10 Planning Areas by Elderly Resident Count (Age 65+)\",\n    x = \"Number of Elderly Residents\",\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    panel.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.background = element_rect(fill = \"#FFFCE8\", color = NA),\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    axis.title.x = element_text(size = 11),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor = element_blank()\n  )\n\np1 / p2\n\n\n\n\n\n\n\nInsights:\n\nTampines, Bedok, and Sengkang are top the list with over 250,000 residents each.\nMillennials (age 28–43) are the largest group in most PA, while Gen X dominates in Bedok, a mature estate.\nYounger generations (Gen Alpha and Gen Z) are more concentrated in newer towns like Sengkang, Punggol, and Jurong West, aligned with recent BTO developments that attract young families.\nThe distribution reflects a balanced generational mix, highlighting Singapore’s multigenerational living pattern—with both aging residents and young households sharing town spaces.\nThese trends align with Singapore’s Smart Nation and HDB’s ‘Designing for Life’ vision: fostering harmonious, inclusive communities where families of all ages can live, age, and thrive together through well-integrated facilities, technology, and people-first urban design.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- data %&gt;%\n  mutate(Age = as.numeric(Age),\n         Generation = case_when(\n           Age &lt;= 9 ~ \"Gen Alpha (≤9)\",\n           Age &lt;= 27 ~ \"Gen Z (10–27)\",\n           Age &lt;= 43 ~ \"Millennials (28–43)\",\n           Age &lt;= 59 ~ \"Gen X (44–59)\",\n           Age &lt;= 77 ~ \"Baby Boomers (60–77)\",\n           TRUE ~ \"Silent Gen (78+)\"\n         ))\n\ngen_by_area &lt;- data %&gt;%\n  group_by(PlanningArea, Generation) %&gt;%\n  summarise(ResidentCount = sum(ResidentCount, na.rm = TRUE), .groups = \"drop\")\n\ntop10_areas &lt;- gen_by_area %&gt;%\n  group_by(PlanningArea) %&gt;%\n  summarise(TotalPop = sum(ResidentCount)) %&gt;%\n  arrange(desc(TotalPop)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(PlanningArea)\n\ngen_top10 &lt;- gen_by_area %&gt;%\n  filter(PlanningArea %in% top10_areas) %&gt;%\n  mutate(\n    PlanningArea = fct_reorder(PlanningArea, ResidentCount, .fun = sum, .desc = TRUE),\n    Generation = factor(Generation, levels = c(\"Silent Gen (78+)\", \"Baby Boomers (60–77)\",\n                                               \"Gen X (44–59)\", \"Millennials (28–43)\",\n                                               \"Gen Z (10–27)\", \"Gen Alpha (≤9)\"))\n  )\n\ngen_colors &lt;- c(\n  \"Silent Gen (78+)\" = \"#c6dbef\",\n  \"Baby Boomers (60–77)\" = \"#6baed6\",\n  \"Gen X (44–59)\" = \"#b2df8a\",\n  \"Millennials (28–43)\" = \"#33a02c\",\n  \"Gen Z (10–27)\" = \"#fb9a99\",\n  \"Gen Alpha (≤9)\" = \"#e31a1c\"\n)\n\n#Plot\nggplot(gen_top10, aes(x = PlanningArea, y = ResidentCount, fill = Generation)) +\n  geom_col(width = 0.8, color = \"white\") +\n  scale_fill_manual(values = gen_colors) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, 300000, 50000),\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  labs(\n    title = \"Generational Composition of Top 10 Most Populated Planning Areas\",\n    subtitle = \"Younger generations dominate newer towns, while older cohorts concentrate in mature estates\",\n    x = \"Planning Area\",\n    y = \"Resident Count\",\n    fill = \"Generation\"\n  ) +\n  theme_clean(base_size = 12) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major.x = element_blank(),\n    legend.position = \"right\"\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#summary",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#summary",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Singapore’s demographic structure, based on June 2024 data, highlights a maturing society with a dominant working-age group and a median age of 42. The growing share of seniors and the narrowing base of younger age groups reflect the effects of population aging and low birth rates. Mature estates such as Outram have the highest proportion of elderly residents, while Bedok and Tampines house the largest absolute numbers. In contrast, newer towns like Sengkang and Punggol show higher concentrations of younger generations—particularly Gen Alpha and Gen Z—driven by recent BTO developments attracting young families. Millennials remain the largest generational group across most areas, reinforcing their role in shaping urban life. This evolving yet balanced generational landscape underscores the need for inclusive community planning that supports both young families and seniors—fostering intergenerational harmony and enabling families to live, age, and thrive together."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#references",
    "href": "Take-home_Ex/Take-home_Ex_1/Take-Home_Ex1.html#references",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Department of Statistics Singapore. (2024). Population Trends 2024.\nRetrieved from: https://www.singstat.gov.sg/publications/population/population-trends\nMinistry of Health Singapore. (2023). Action Plan for Successful Ageing.\nRetrieved from: https://www.moh.gov.sg/newsroom/launch-of-the-2023-action-plan-for-successful-ageing\nHousing & Development Board (HDB). (2021). Designing for Life: Community Planning and Design Guide.\nRetrieved from: https://www.hdb.gov.sg/cs/infoweb/designing-for-life\nSmart Nation and Digital Government Office. (2023). Smart Nation: Empowering Everyone Through Technology.\nRetrieved from: https://www.smartnation.gov.sg\nSingapore Department of Statistics. (n.d.). National Statistical Standards.\nRetrieved from: https://www.singstat.gov.sg/standards"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html",
    "title": "Hands-on Exercise 04A",
    "section": "",
    "text": "Visualizing distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualizing distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualizing distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualizing distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualizations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualization technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Plot\nggplot(exam, aes(x = ENGLISH, y = CLASS)) +\n  geom_density_ridges(\n    scale = 1.2,\n    rel_min_height = 0.01,\n    fill = \"gray\",\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = \"CLASS\",\n    expand = expansion(add = c(0.2, 0.5))\n  ) +\n  theme_minimal(base_size = 14) +  # Clean base theme\n  theme(\n    panel.grid.major.x = element_line(color =\"whitesmoke\"),  # vertical lines\n    panel.grid.major.y = element_line(color = \"whitesmoke\"),  # horizontal lines\n    panel.grid.minor = element_blank(),                   # no minor gridlines\n    panel.background = element_rect(fill = \"white\", color = NA),  # white background\n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of groups to represent is medium to high. A classic window separation would take up too much space. The overlapping design of ridgelines makes better use of space. If you have fewer than 5 groups, other distribution plots may be more effective.\nRidgeline plots work well when there’s a clear pattern or ranking among groups. Otherwise, excessive overlap may lead to a messy plot with little insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualization techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualize the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#learning-outcome",
    "title": "Hands-on Exercise 04A",
    "section": "",
    "text": "Visualizing distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualizing distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualizing distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#getting-started",
    "title": "Hands-on Exercise 04A",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualizing distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualizations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on_Ex04A",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Plot\nggplot(exam, aes(x = ENGLISH, y = CLASS)) +\n  geom_density_ridges(\n    scale = 1.2,\n    rel_min_height = 0.01,\n    fill = \"gray\",\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = \"CLASS\",\n    expand = expansion(add = c(0.2, 0.5))\n  ) +\n  theme_minimal(base_size = 14) +  # Clean base theme\n  theme(\n    panel.grid.major.x = element_line(color =\"whitesmoke\"),  # vertical lines\n    panel.grid.major.y = element_line(color = \"whitesmoke\"),  # horizontal lines\n    panel.grid.minor = element_blank(),                   # no minor gridlines\n    panel.background = element_rect(fill = \"white\", color = NA),  # white background\n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of groups to represent is medium to high. A classic window separation would take up too much space. The overlapping design of ridgelines makes better use of space. If you have fewer than 5 groups, other distribution plots may be more effective.\nRidgeline plots work well when there’s a clear pattern or ranking among groups. Otherwise, excessive overlap may lead to a messy plot with little insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on_Ex04A",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#references",
    "title": "Hands-on Exercise 04A",
    "section": "",
    "text": "Introducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualizing-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualizing-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 04A",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualization technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(ggridges)\n\n# Plot\nggplot(exam, aes(x = ENGLISH, y = CLASS)) +\n  geom_density_ridges(\n    scale = 1.2,\n    rel_min_height = 0.01,\n    fill = \"gray\",\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = \"CLASS\",\n    expand = expansion(add = c(0.2, 0.5))\n  ) +\n  theme_minimal(base_size = 14) +  # Clean base theme\n  theme(\n    panel.grid.major.x = element_line(color =\"whitesmoke\"),  # vertical lines\n    panel.grid.major.y = element_line(color = \"whitesmoke\"),  # horizontal lines\n    panel.grid.minor = element_blank(),                   # no minor gridlines\n    panel.background = element_rect(fill = \"white\", color = NA),  # white background\n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of groups to represent is medium to high. A classic window separation would take up too much space. The overlapping design of ridgelines makes better use of space. If you have fewer than 5 groups, other distribution plots may be more effective.\nRidgeline plots work well when there’s a clear pattern or ranking among groups. Otherwise, excessive overlap may lead to a messy plot with little insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualizing-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04A/Hands-on_Ex04A.html#visualizing-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 04A",
    "section": "",
    "text": "Raincloud Plot is a data visualization techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualize the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html",
    "href": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html",
    "title": "Hands-on Exercise 04B",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package.\n\n\n# A tibble: 322 × 7 ID CLASS GENDER RACE ENGLISH MATHS SCIENCE &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Student321 3I Male Malay 21 9 15 2 Student305 3I Female Malay 24 22 16 3 Student289 3H Male Chinese 26 16 16 4 Student227 3F Male Chinese 27 77 31 5 Student318 3I Male Malay 27 11 25 6 Student306 3I Female Malay 31 16 16 7 Student313 3I Male Chinese 31 21 25 8 Student316 3I Male Malay 31 18 27 9 Student312 3I Male Malay 33 19 15 10 Student297 3H Male Indian 34 49 37 # ℹ 312 more rows\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#learning-outcome",
    "title": "Hands-on Exercise 04B",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 04B",
    "section": "",
    "text": "ggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04B/Hands-on_Ex04B.html#getting-started",
    "title": "Hands-on Exercise 04B",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package.\n\n\n# A tibble: 322 × 7 ID CLASS GENDER RACE ENGLISH MATHS SCIENCE &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Student321 3I Male Malay 21 9 15 2 Student305 3I Female Malay 24 22 16 3 Student289 3H Male Chinese 26 16 16 4 Student227 3F Male Chinese 27 77 31 5 Student318 3I Male Malay 27 11 25 6 Student306 3I Female Malay 31 16 16 7 Student313 3I Male Chinese 31 21 25 8 Student316 3I Male Malay 31 18 27 9 Student312 3I Male Malay 33 19 15 10 Student297 3H Male Indian 34 49 37 # ℹ 312 more rows\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html",
    "href": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html",
    "title": "Hands-on Exercse 04C",
    "section": "",
    "text": "Visualizing uncertainty is relatively new in statistical graphics. In this exercise, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this exercise we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe code chunkThe Table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n.width = 0.95 .point = median .interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nPlot below shows 95% and 99% Confidence Interval\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = \"median\",\n    .interval = \"quantile\",\n    aes(colour = \"95% CI\")) +\n  stat_pointinterval(\n    .width = 0.99,\n    .point = \"median\",\n    .interval = \"quantile\",\n    aes(colour = \"99% CI\")) +\n  scale_colour_manual(\n    values = c(\"95% CI\" = \"green\", \"99% CI\" = \"red\"),\n    labels = c(\"95% CI\", \"99% CI\")) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\") +\n  theme_minimal()\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: We only need to perform this step once.\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#learning-outcome",
    "title": "Hands-on Exercse 04C",
    "section": "",
    "text": "Visualizing uncertainty is relatively new in statistical graphics. In this exercise, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this exercise we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#getting-started",
    "title": "Hands-on Exercse 04C",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercse 04C",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe code chunkThe Table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#visualizing-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#visualizing-uncertainty-ggdist-package",
    "title": "Hands-on Exercse 04C",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n.width = 0.95 .point = median .interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nPlot below shows 95% and 99% Confidence Interval\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = \"median\",\n    .interval = \"quantile\",\n    aes(colour = \"95% CI\")) +\n  stat_pointinterval(\n    .width = 0.99,\n    .point = \"median\",\n    .interval = \"quantile\",\n    aes(colour = \"99% CI\")) +\n  scale_colour_manual(\n    values = c(\"95% CI\" = \"green\", \"99% CI\" = \"red\"),\n    labels = c(\"95% CI\", \"99% CI\")) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\") +\n  theme_minimal()\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04C/Hands-on_Ex04C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercse 04C",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\n\nNote: We only need to perform this step once.\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, we will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26\n\n\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualization like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#overview",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, we will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#importing-data",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#funnelplotr-methods",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualization like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04D/Hands-on_Ex04D.html#references",
    "title": "Hands-on Exercise 04D",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html",
    "href": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html",
    "title": "Take-home Exercise 01B",
    "section": "",
    "text": "Phase 2: to select one submission provided by classmate, critic three good design principles and three areas for further improvement. With reference to the comment, prepare the makeover version of the data visualisation. I am selecting this submission from other classmate, as shown here.\n\n\nThe data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggplot2) \n\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\npop_data &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)\n\n\n\n\n\n\n\npyramid_data &lt;- pop_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  scale_fill_manual(values = c(\"Males\" = \"#102E50\", \"Females\" = \"#F7CFD8\")) + \n  scale_x_discrete(breaks = seq(0, 100, by = 10)) +\n  labs(title = \"Singapore Age Pyramid (2024)\",\n       x = \"Age\", y = \"Population\") +\n  theme_classic()\n\n\n\n\n\n\n\n\nComments:\nThree good design principles:\n\nDifferent contrast colours are used to differentiate between Males and Females Resident count\nAppropriate use of chart (pyramid chart) instead of points to represent discrete values\nClear labeling for chart title, legend, x axis title and y axis title\n\nThree areas for further improvement\n\nAxis Labeling and Scale Consistency\nConfusing x axis (starts from 0) and y axis (0 starts from the center) labeling. And, the distance between 0 to 10 to 20 on the y-axis is not consistent which signalling there is an error in the data preparation. The y-axis values ranges from 0 mark to 80 mark, whereas the dataset for Age ranges from 0 to 90+. There should be a 90 mark in the y-axis to represent the clearer and more accurate representation of the chart.\nGraphical Integrity: The top chart shows 2 wide bars after tapering off of the top pyramid which is not a true representation of the dataset. There should be a data cleaning performed before the visualization to change the data type for Age column from strings to integer and there is 1 value in the Age column: 90_and_Over that needs to be recoded to a numeric number. The lack of data preparation has led to the wrong representation of the data in this chart.\nGroup Ages into 5-Year Bins: The current age pyramid displays age in single-year intervals, resulting in a visually dense and harder-to-read chart. Binning the ages into 5-year groups (e.g., 0–4, 5–9, …, 85–89, 90+) would simplify the structure and highlight broader population trends more effectively. Additionally, including a vertical line to indicate the median age would provide a valuable reference point, making it easier to interpret the overall age distribution and identify demographic imbalance\n\nMakeover version of the Chart\nSome data preparation is needed: - to make the age group of interval 5 years from 0 to 90+ - to change the data type of Age from character to numeric\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# Data preparation\npyramid_data &lt;- pop_data %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"91\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(AgeGroup = cut(Age,\n                        breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45,\n                                   50, 55, 60, 65, 70, 75, 80, 85, 90, Inf),\n                        right = TRUE,\n                        include.lowest = TRUE,\n                        labels = c(\"0–5\", \"6–10\", \"11–15\", \"16–20\", \"21–25\",\n                                   \"26–30\", \"31–35\", \"36–40\", \"41–45\", \"46–50\",\n                                   \"51–55\", \"56–60\", \"61–65\", \"66–70\", \"71–75\",\n                                   \"76–80\", \"81–85\", \"86–90\", \"90+\"))) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop),\n         Label = comma(abs(Pop), accuracy = 1),\n         Rank = dense_rank(desc(AgeGroup)))\n\nmedian_group &lt;- pyramid_data %&gt;%\n  group_by(AgeGroup) %&gt;%\n  summarise(TotalPop = sum(abs(Pop))) %&gt;%\n  mutate(CumSum = cumsum(TotalPop),\n         MedianFlag = CumSum &gt;= sum(TotalPop) / 2) %&gt;%\n  filter(MedianFlag) %&gt;%\n  slice(1) %&gt;%\n  pull(AgeGroup)\n\n# Plot\nggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  geom_text(aes(label = Label,\n              hjust = case_when(\n                AgeGroup %in% c(\"90+\", \"86–90\") & Sex == \"Males\" ~ 1.1,\n                AgeGroup %in% c(\"90+\", \"86–90\") & Sex == \"Females\" ~ -0.1,\n                Sex == \"Males\" ~ 0,  # centered inside left bar\n                Sex == \"Females\" ~ 1.5  # centered inside right bar\n              )),\n          size = 3, color = \"black\") +  # &lt;- Added the missing plus sign here\n  geom_vline(xintercept = 0, color = \"black\") +\n  coord_flip() +\n  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove x-axis tick values\n  scale_fill_manual(values = c(\"Males\" = \"#7EC8E3\", \"Females\" = \"#F7CFD8\")) +\n  labs(title = \"Singapore Population Age Pyramid (2024)\",\n       x = \"Age Group (Years)\", y = NULL, fill = \"Sex\") +\n  theme_minimal(base_size = 11) +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.text.y = element_text(size = 9),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"right\") +\n  annotate(\"text\", x = median_group, y = 0,\n           label = paste(\"Median:\", median_group),\n           vjust = -0.8, fontface = \"italic\", color = \"gray40\", size = 4)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html#the-designing-tool",
    "href": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html#the-designing-tool",
    "title": "Take-home Exercise 01B",
    "section": "",
    "text": "The data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggplot2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html#import-data",
    "title": "Take-home Exercise 01B",
    "section": "",
    "text": "To accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shared by Department of Statistics, Singapore (DOS) will be used and we wil load it as follows:\n\npop_data &lt;- read_csv(\"data/respopagesex2024.csv\", col_names = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html#original-data-visualization",
    "href": "Take-home_Ex/Take-home_Ex_1B/Take-home_Ex01B.html#original-data-visualization",
    "title": "Take-home Exercise 01B",
    "section": "",
    "text": "pyramid_data &lt;- pop_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  scale_fill_manual(values = c(\"Males\" = \"#102E50\", \"Females\" = \"#F7CFD8\")) + \n  scale_x_discrete(breaks = seq(0, 100, by = 10)) +\n  labs(title = \"Singapore Age Pyramid (2024)\",\n       x = \"Age\", y = \"Population\") +\n  theme_classic()\n\n\n\n\n\n\n\n\nComments:\nThree good design principles:\n\nDifferent contrast colours are used to differentiate between Males and Females Resident count\nAppropriate use of chart (pyramid chart) instead of points to represent discrete values\nClear labeling for chart title, legend, x axis title and y axis title\n\nThree areas for further improvement\n\nAxis Labeling and Scale Consistency\nConfusing x axis (starts from 0) and y axis (0 starts from the center) labeling. And, the distance between 0 to 10 to 20 on the y-axis is not consistent which signalling there is an error in the data preparation. The y-axis values ranges from 0 mark to 80 mark, whereas the dataset for Age ranges from 0 to 90+. There should be a 90 mark in the y-axis to represent the clearer and more accurate representation of the chart.\nGraphical Integrity: The top chart shows 2 wide bars after tapering off of the top pyramid which is not a true representation of the dataset. There should be a data cleaning performed before the visualization to change the data type for Age column from strings to integer and there is 1 value in the Age column: 90_and_Over that needs to be recoded to a numeric number. The lack of data preparation has led to the wrong representation of the data in this chart.\nGroup Ages into 5-Year Bins: The current age pyramid displays age in single-year intervals, resulting in a visually dense and harder-to-read chart. Binning the ages into 5-year groups (e.g., 0–4, 5–9, …, 85–89, 90+) would simplify the structure and highlight broader population trends more effectively. Additionally, including a vertical line to indicate the median age would provide a valuable reference point, making it easier to interpret the overall age distribution and identify demographic imbalance\n\nMakeover version of the Chart\nSome data preparation is needed: - to make the age group of interval 5 years from 0 to 90+ - to change the data type of Age from character to numeric\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# Data preparation\npyramid_data &lt;- pop_data %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"91\", Age),\n         Age = as.numeric(Age)) %&gt;%\n  filter(!is.na(Age)) %&gt;%\n  mutate(AgeGroup = cut(Age,\n                        breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45,\n                                   50, 55, 60, 65, 70, 75, 80, 85, 90, Inf),\n                        right = TRUE,\n                        include.lowest = TRUE,\n                        labels = c(\"0–5\", \"6–10\", \"11–15\", \"16–20\", \"21–25\",\n                                   \"26–30\", \"31–35\", \"36–40\", \"41–45\", \"46–50\",\n                                   \"51–55\", \"56–60\", \"61–65\", \"66–70\", \"71–75\",\n                                   \"76–80\", \"81–85\", \"86–90\", \"90+\"))) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop),\n         Label = comma(abs(Pop), accuracy = 1),\n         Rank = dense_rank(desc(AgeGroup)))\n\nmedian_group &lt;- pyramid_data %&gt;%\n  group_by(AgeGroup) %&gt;%\n  summarise(TotalPop = sum(abs(Pop))) %&gt;%\n  mutate(CumSum = cumsum(TotalPop),\n         MedianFlag = CumSum &gt;= sum(TotalPop) / 2) %&gt;%\n  filter(MedianFlag) %&gt;%\n  slice(1) %&gt;%\n  pull(AgeGroup)\n\n# Plot\nggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  geom_text(aes(label = Label,\n              hjust = case_when(\n                AgeGroup %in% c(\"90+\", \"86–90\") & Sex == \"Males\" ~ 1.1,\n                AgeGroup %in% c(\"90+\", \"86–90\") & Sex == \"Females\" ~ -0.1,\n                Sex == \"Males\" ~ 0,  # centered inside left bar\n                Sex == \"Females\" ~ 1.5  # centered inside right bar\n              )),\n          size = 3, color = \"black\") +  # &lt;- Added the missing plus sign here\n  geom_vline(xintercept = 0, color = \"black\") +\n  coord_flip() +\n  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove x-axis tick values\n  scale_fill_manual(values = c(\"Males\" = \"#7EC8E3\", \"Females\" = \"#F7CFD8\")) +\n  labs(title = \"Singapore Population Age Pyramid (2024)\",\n       x = \"Age Group (Years)\", y = NULL, fill = \"Sex\") +\n  theme_minimal(base_size = 11) +\n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.text.y = element_text(size = 9),\n        panel.grid.major.y = element_blank(),\n        legend.position = \"right\") +\n  annotate(\"text\", x = median_group, y = 0,\n           label = paste(\"Median:\", median_group),\n           vjust = -0.8, fontface = \"italic\", color = \"gray40\", size = 4)"
  }
]